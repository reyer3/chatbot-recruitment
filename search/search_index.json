{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sistema de Reclutamiento AI","text":""},{"location":"#estructura-de-documentacion","title":"Estructura de Documentaci\u00f3n","text":""},{"location":"#vision-general","title":"Visi\u00f3n General","text":"<p>Sistema de reclutamiento potenciado por IA que integra: - An\u00e1lisis autom\u00e1tico de CVs - Chat por WhatsApp - Evaluaci\u00f3n de candidatos - Seguimiento de procesos</p>"},{"location":"#arquitectura","title":"Arquitectura","text":""},{"location":"#componentes-principales","title":"Componentes Principales","text":"<ol> <li>Core Backend (Python/FastAPI)</li> <li>Clean Architecture</li> <li>Domain-Driven Design</li> <li>Async-first Development</li> <li> <p>ULID como identificadores</p> </li> <li> <p>WhatsApp Service (Node.js)</p> </li> <li>BuilderBot framework</li> <li>Microservicio independiente</li> <li> <p>Comunicaci\u00f3n por mensajer\u00eda</p> </li> <li> <p>AI Stack</p> </li> <li>LangChain para orquestaci\u00f3n</li> <li>Qdrant para b\u00fasqueda vectorial</li> <li>LangGraph para flujos</li> <li>LangSmith para monitoreo</li> </ol>"},{"location":"#integraciones","title":"Integraciones","text":"<ul> <li>WhatsApp Business API</li> <li>OpenAI GPT-4</li> <li>PostgreSQL</li> <li>RabbitMQ</li> </ul>"},{"location":"#estado-actual","title":"Estado Actual","text":""},{"location":"#completado","title":"Completado","text":"<ul> <li>Decisiones arquitect\u00f3nicas base</li> <li>Dise\u00f1o de API principal</li> <li>Estructura de dominios</li> <li>Estrategia de integraci\u00f3n WhatsApp</li> </ul>"},{"location":"#en-progreso","title":"En Progreso","text":"<ul> <li>Implementaci\u00f3n de microservicios</li> <li>Procesamiento de CVs</li> <li>Flujos conversacionales</li> <li>Sistema de evaluaci\u00f3n</li> </ul>"},{"location":"#pendiente","title":"Pendiente","text":"<ul> <li>Testing end-to-end</li> <li>Monitoreo y m\u00e9tricas</li> <li>Despliegue en producci\u00f3n</li> <li>Documentaci\u00f3n de usuario</li> </ul>"},{"location":"#proximos-pasos","title":"Pr\u00f3ximos Pasos","text":"<ol> <li>Completar documentaci\u00f3n faltante:</li> <li>Diagramas de arquitectura</li> <li>Esquemas de API</li> <li>Flujos de reclutamiento</li> <li> <p>Gu\u00edas de despliegue</p> </li> <li> <p>Crear backlog detallado:</p> </li> <li>Historias de usuario</li> <li>Tareas t\u00e9cnicas</li> <li>Estimaciones</li> <li>Priorizaci\u00f3n</li> </ol>"},{"location":"#referencias","title":"Referencias","text":"<ul> <li>ADRs</li> <li>API Docs</li> <li>Deployment</li> <li>Procesos</li> </ul>"},{"location":"api/endpoints/","title":"API Endpoints","text":""},{"location":"api/endpoints/#autenticacion","title":"Autenticaci\u00f3n","text":""},{"location":"api/endpoints/#post-apiv1authlogin","title":"POST /api/v1/auth/login","text":"<p>Autenticaci\u00f3n de usuarios.</p> <pre><code>from pydantic import BaseModel\n\nclass LoginRequest(BaseModel):\n    email: str\n    password: str\n\nclass LoginResponse(BaseModel):\n    access_token: str\n    token_type: str = \"bearer\"\n</code></pre> <p>Request: <pre><code>{\n    \"email\": \"admin@example.com\",\n    \"password\": \"secure_password\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...\",\n    \"token_type\": \"bearer\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#procesos-de-reclutamiento","title":"Procesos de Reclutamiento","text":""},{"location":"api/endpoints/#post-apiv1recruitment-processes","title":"POST /api/v1/recruitment-processes","text":"<p>Crear un nuevo proceso de reclutamiento.</p> <pre><code>from pydantic import BaseModel\nfrom typing import List\n\nclass CreateProcessRequest(BaseModel):\n    title: str\n    description: str\n    requirements: List[str]\n    evaluation_criteria: dict[str, float]\n\nclass ProcessResponse(BaseModel):\n    id: str  # ULID string, ej: \"01ARZ3NDEKTSV4RRFFQ69G5FAV\"\n    title: str\n    description: str\n    requirements: List[str]\n    evaluation_criteria: dict[str, float]\n    status: str\n    created_at: datetime\n</code></pre> <p>Request: <pre><code>{\n    \"title\": \"Senior Python Developer\",\n    \"description\": \"Buscamos desarrollador Python con experiencia en FastAPI\",\n    \"requirements\": [\n        \"5+ a\u00f1os de experiencia en Python\",\n        \"Conocimiento de FastAPI\",\n        \"Experiencia en arquitectura limpia\"\n    ],\n    \"evaluation_criteria\": {\n        \"technical_skills\": 0.4,\n        \"experience\": 0.3,\n        \"soft_skills\": 0.3\n    }\n}\n</code></pre></p>"},{"location":"api/endpoints/#get-apiv1recruitment-processesprocess_id","title":"GET /api/v1/recruitment-processes/{process_id}","text":"<p>Obtener detalles de un proceso espec\u00edfico.</p> <p>Response: <pre><code>{\n    \"id\": \"01ARZ3NDEKTSV4RRFFQ69G5FAV\",\n    \"title\": \"Senior Python Developer\",\n    \"description\": \"Buscamos desarrollador Python con experiencia en FastAPI\",\n    \"requirements\": [\n        \"5+ a\u00f1os de experiencia en Python\",\n        \"Conocimiento de FastAPI\",\n        \"Experiencia en arquitectura limpia\"\n    ],\n    \"evaluation_criteria\": {\n        \"technical_skills\": 0.4,\n        \"experience\": 0.3,\n        \"soft_skills\": 0.3\n    },\n    \"status\": \"active\",\n    \"created_at\": \"2023-11-15T14:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#analisis-de-cv","title":"An\u00e1lisis de CV","text":""},{"location":"api/endpoints/#post-apiv1cv-analysis","title":"POST /api/v1/cv-analysis","text":"<p>Analizar un CV para un proceso espec\u00edfico.</p> <pre><code>class CVAnalysisRequest(BaseModel):\n    process_id: str  # ULID string\n    cv_file: UploadFile\n    candidate_info: dict[str, str]\n\nclass CVAnalysisResponse(BaseModel):\n    analysis_id: str  # ULID string\n    status: str\n    matching_score: float\n    evaluation_details: dict[str, float]\n    recommendations: List[str]\n</code></pre> <p>Request: <pre><code>POST /api/v1/cv-analysis\nContent-Type: multipart/form-data\n\nprocess_id: \"01ARZ3NDEKTSV4RRFFQ69G5FAV\"\ncv_file: [binary_file]\ncandidate_info: {\n    \"name\": \"Juan P\u00e9rez\",\n    \"email\": \"juan@example.com\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"analysis_id\": \"01ARZ3NDEKTSV4RRFFQ69G5FAV\",\n    \"status\": \"completed\",\n    \"matching_score\": 0.85,\n    \"evaluation_details\": {\n        \"technical_skills\": 0.9,\n        \"experience\": 0.8,\n        \"soft_skills\": 0.85\n    },\n    \"recommendations\": [\n        \"Candidato altamente compatible con el perfil\",\n        \"Experiencia t\u00e9cnica excepcional en Python\",\n        \"Recomendado para entrevista t\u00e9cnica\"\n    ]\n}\n</code></pre></p>"},{"location":"api/endpoints/#get-apiv1cv-analysisanalysis_id","title":"GET /api/v1/cv-analysis/{analysis_id}","text":"<p>Obtener resultados de un an\u00e1lisis espec\u00edfico.</p> <p>Response: <pre><code>{\n    \"analysis_id\": \"01ARZ3NDEKTSV4RRFFQ69G5FAV\",\n    \"process_id\": \"01ARZ3NDEKTSV4RRFFQ69G5FAV\",\n    \"candidate_id\": \"01ARZ3NDEKTSV4RRFFQ69G5FAV\",\n    \"status\": \"completed\",\n    \"matching_score\": 0.85,\n    \"evaluation_details\": {\n        \"technical_skills\": 0.9,\n        \"experience\": 0.8,\n        \"soft_skills\": 0.85\n    },\n    \"recommendations\": [\n        \"Candidato altamente compatible con el perfil\",\n        \"Experiencia t\u00e9cnica excepcional en Python\",\n        \"Recomendado para entrevista t\u00e9cnica\"\n    ],\n    \"created_at\": \"2023-11-15T14:35:00Z\",\n    \"completed_at\": \"2023-11-15T14:36:30Z\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#candidatos","title":"Candidatos","text":""},{"location":"api/endpoints/#get-apiv1candidatescandidate_id","title":"GET /api/v1/candidates/{candidate_id}","text":"<p>Obtener informaci\u00f3n detallada de un candidato.</p> <pre><code>class CandidateResponse(BaseModel):\n    id: str  # ULID string\n    name: str\n    email: str\n    status: str\n    evaluations: List[EvaluationSummary]\n    created_at: datetime\n    updated_at: datetime\n\nclass EvaluationSummary(BaseModel):\n    process_id: str  # ULID string\n    matching_score: float\n    status: str\n    evaluation_date: datetime\n</code></pre> <p>Response: <pre><code>{\n    \"id\": \"01ARZ3NDEKTSV4RRFFQ69G5FAV\",\n    \"name\": \"Juan P\u00e9rez\",\n    \"email\": \"juan@example.com\",\n    \"status\": \"in_process\",\n    \"evaluations\": [\n        {\n            \"process_id\": \"01ARZ3NDEKTSV4RRFFQ69G5FAV\",\n            \"matching_score\": 0.85,\n            \"status\": \"evaluated\",\n            \"evaluation_date\": \"2023-11-15T14:36:30Z\"\n        }\n    ],\n    \"created_at\": \"2023-11-15T14:35:00Z\",\n    \"updated_at\": \"2023-11-15T14:36:30Z\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#patch-apiv1candidatescandidate_id","title":"PATCH /api/v1/candidates/{candidate_id}","text":"<p>Actualizar el estado de un candidato.</p> <pre><code>class UpdateCandidateRequest(BaseModel):\n    status: str\n    notes: str | None = None\n\nclass UpdateCandidateResponse(BaseModel):\n    id: str  # ULID string\n    status: str\n    updated_at: datetime\n</code></pre> <p>Request: <pre><code>{\n    \"status\": \"interviewed\",\n    \"notes\": \"Excelente desempe\u00f1o en la entrevista t\u00e9cnica\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n    \"id\": \"01ARZ3NDEKTSV4RRFFQ69G5FAV\",\n    \"status\": \"interviewed\",\n    \"updated_at\": \"2023-11-15T16:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/endpoints/#manejo-de-errores","title":"Manejo de Errores","text":""},{"location":"api/endpoints/#errores-comunes","title":"Errores Comunes","text":"<pre><code>class ErrorResponse(BaseModel):\n    code: str\n    message: str\n    details: dict[str, Any] | None = None\n</code></pre>"},{"location":"api/endpoints/#400-bad-request","title":"400 Bad Request","text":"<pre><code>{\n    \"code\": \"INVALID_REQUEST\",\n    \"message\": \"Datos de solicitud inv\u00e1lidos\",\n    \"details\": {\n        \"email\": \"formato de email inv\u00e1lido\"\n    }\n}\n</code></pre>"},{"location":"api/endpoints/#401-unauthorized","title":"401 Unauthorized","text":"<pre><code>{\n    \"code\": \"UNAUTHORIZED\",\n    \"message\": \"Token de autenticaci\u00f3n inv\u00e1lido o expirado\"\n}\n</code></pre>"},{"location":"api/endpoints/#404-not-found","title":"404 Not Found","text":"<pre><code>{\n    \"code\": \"NOT_FOUND\",\n    \"message\": \"Recurso no encontrado\",\n    \"details\": {\n        \"resource_type\": \"candidate\",\n        \"resource_id\": \"invalid_id\"\n    }\n}\n</code></pre>"},{"location":"api/endpoints/#429-too-many-requests","title":"429 Too Many Requests","text":"<p>```json {     \"code\": \"RATE_LIMIT_EXCEEDED\",     \"message\": \"Demasiadas solicitudes\",     \"details\": {         \"retry_after\": 60     } }</p>"},{"location":"architecture/clean-architecture/","title":"Clean Architecture y Principios de Dise\u00f1o","text":""},{"location":"architecture/clean-architecture/#principios-arquitectonicos","title":"Principios Arquitect\u00f3nicos","text":""},{"location":"architecture/clean-architecture/#1-clean-architecture","title":"1. Clean Architecture","text":"<ul> <li>Independencia de frameworks: El dominio no depende de la existencia de ninguna biblioteca</li> <li>Testeable: La l\u00f3gica de negocio puede probarse sin elementos externos</li> <li>Independiente de la UI: La interfaz puede cambiar sin cambiar el sistema</li> <li>Independiente de la base de datos: Se puede cambiar PostgreSQL por MongoDB</li> <li>Independiente de cualquier elemento externo: Las reglas de negocio no saben nada del mundo exterior</li> </ul>"},{"location":"architecture/clean-architecture/#2-vertical-slicing","title":"2. Vertical Slicing","text":"<p>Organizaci\u00f3n por caracter\u00edsticas de negocio en lugar de capas t\u00e9cnicas: - Cada contexto es independiente y autocontenido - Facilita el desarrollo y mantenimiento por equipos - Permite diferentes decisiones t\u00e9cnicas por contexto</p>"},{"location":"architecture/clean-architecture/#3-screaming-architecture","title":"3. Screaming Architecture","text":"<p>La estructura del c\u00f3digo grita el prop\u00f3sito del sistema: - Los nombres de directorios reflejan el dominio - La estructura comunica la intenci\u00f3n del negocio - F\u00e1cil comprensi\u00f3n del prop\u00f3sito de cada componente</p>"},{"location":"architecture/clean-architecture/#bounded-contexts","title":"Bounded Contexts","text":""},{"location":"architecture/clean-architecture/#1-recruitment-processes","title":"1. Recruitment Processes","text":"<p>Responsabilidad: Gesti\u00f3n de procesos de selecci\u00f3n - Crear y modificar procesos - Definir requisitos y criterios - Gestionar estados del proceso</p> <pre><code>from dataclasses import dataclass\nfrom typing import List, Optional\nfrom datetime import datetime\nfrom uuid import UUID\n\n@dataclass(frozen=True)\nclass ProcessId:\n    value: UUID\n\n@dataclass(frozen=True)\nclass ProcessTitle:\n    value: str\n\n    def __post_init__(self):\n        if len(self.value) &lt; 3:\n            raise ValueError(\"Title must be at least 3 characters long\")\n\n@dataclass(frozen=True)\nclass Requirement:\n    description: str\n    is_mandatory: bool\n\n@dataclass\nclass RecruitmentProcess:\n    id: ProcessId\n    title: ProcessTitle\n    requirements: List[Requirement]\n    evaluation_criteria: \"EvaluationCriteria\"\n    status: \"ProcessStatus\"\n    created_at: datetime\n    updated_at: Optional[datetime] = None\n\n    def evaluate(self, candidate: \"Candidate\") -&gt; \"Evaluation\":\n        return self.evaluation_criteria.evaluate(candidate, self.requirements)\n</code></pre>"},{"location":"architecture/clean-architecture/#2-cv-analysis","title":"2. CV Analysis","text":"<p>Responsabilidad: An\u00e1lisis y evaluaci\u00f3n de CVs - Procesar documentos - Extraer informaci\u00f3n - Evaluar seg\u00fan criterios</p> <pre><code>from abc import ABC, abstractmethod\nfrom typing import Protocol\n\nclass CVAnalyzer(Protocol):\n    async def analyze(self, cv: \"CV\") -&gt; \"CVAnalysis\":\n        ...\n\n    async def evaluate(\n        self, \n        analysis: \"CVAnalysis\", \n        criteria: \"EvaluationCriteria\"\n    ) -&gt; \"Evaluation\":\n        ...\n\nclass OpenAICVAnalyzer:\n    def __init__(self, openai_client: \"OpenAIClient\"):\n        self._openai = openai_client\n\n    async def analyze(self, cv: \"CV\") -&gt; \"CVAnalysis\":\n        # Implementaci\u00f3n con OpenAI\n        ...\n</code></pre>"},{"location":"architecture/clean-architecture/#3-candidates","title":"3. Candidates","text":"<p>Responsabilidad: Gesti\u00f3n de candidatos - Almacenar informaci\u00f3n de candidatos - Tracking de estado - Gesti\u00f3n de evaluaciones</p>"},{"location":"architecture/clean-architecture/#capa-de-aplicacion","title":"Capa de Aplicaci\u00f3n","text":""},{"location":"architecture/clean-architecture/#casos-de-uso","title":"Casos de Uso","text":"<p>Cada operaci\u00f3n del sistema se representa como un caso de uso:</p> <pre><code>from dataclasses import dataclass\nfrom typing import Protocol\n\nclass CVRepository(Protocol):\n    async def find_by_id(self, cv_id: UUID) -&gt; Optional[\"CV\"]:\n        ...\n    async def save(self, cv: \"CV\") -&gt; None:\n        ...\n\n@dataclass\nclass AnalyzeCVCommand:\n    cv_id: UUID\n\nclass AnalyzeCVUseCase:\n    def __init__(\n        self,\n        cv_analyzer: CVAnalyzer,\n        cv_repository: CVRepository\n    ):\n        self._analyzer = cv_analyzer\n        self._repository = cv_repository\n\n    async def execute(self, command: AnalyzeCVCommand) -&gt; None:\n        cv = await self._repository.find_by_id(command.cv_id)\n        if not cv:\n            raise CVNotFoundError(command.cv_id)\n\n        analysis = await self._analyzer.analyze(cv)\n        cv.update_analysis(analysis)\n        await self._repository.save(cv)\n</code></pre>"},{"location":"architecture/clean-architecture/#infraestructura","title":"Infraestructura","text":""},{"location":"architecture/clean-architecture/#1-persistencia","title":"1. Persistencia","text":"<pre><code>from typing import Optional\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nclass PostgresCVRepository:\n    def __init__(self, session: AsyncSession):\n        self._session = session\n\n    async def find_by_id(self, cv_id: UUID) -&gt; Optional[CV]:\n        result = await self._session.execute(\n            select(CVModel).where(CVModel.id == cv_id)\n        )\n        cv_model = result.scalar_one_or_none()\n        return cv_model.to_domain() if cv_model else None\n\n    async def save(self, cv: CV) -&gt; None:\n        cv_model = CVModel.from_domain(cv)\n        self._session.add(cv_model)\n        await self._session.commit()\n</code></pre>"},{"location":"architecture/clean-architecture/#2-servicios-externos","title":"2. Servicios Externos","text":"<pre><code>class OpenAIService:\n    def __init__(self, api_key: str):\n        self._client = AsyncOpenAI(api_key=api_key)\n\n    async def analyze_cv(self, content: str) -&gt; Dict[str, Any]:\n        response = await self._client.chat.completions.create(\n            model=\"gpt-4\",\n            messages=[\n                {\"role\": \"system\", \"content\": \"Analiza el siguiente CV...\"},\n                {\"role\": \"user\", \"content\": content}\n            ]\n        )\n        return response.choices[0].message.content\n</code></pre>"},{"location":"architecture/clean-architecture/#eventos-de-dominio","title":"Eventos de Dominio","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import List\n\n@dataclass\nclass DomainEvent:\n    occurred_on: datetime = field(default_factory=datetime.utcnow)\n\n@dataclass\nclass CVAnalyzedEvent(DomainEvent):\n    cv_id: UUID\n    analysis_result: \"AnalysisResult\"\n</code></pre>"},{"location":"architecture/clean-architecture/#testing","title":"Testing","text":""},{"location":"architecture/clean-architecture/#1-unit-tests","title":"1. Unit Tests","text":"<p>```python from unittest.mock import AsyncMock import pytest</p> <p>async def test_analyze_cv_use_case():     # Arrange     cv = CV(id=UUID(\"...\"), content=\"...\")     mock_repo = AsyncMock(CVRepository)     mock_repo.find_by_id.return_value = cv     mock_analyzer = AsyncMock(CVAnalyzer)     use_case = AnalyzeCVUseCase(mock_analyzer, mock_repo)</p> <pre><code># Act\nawait use_case.execute(AnalyzeCVCommand(cv_id=cv.id))\n\n# Assert\nmock_analyzer.analyze.assert_called_once_with(cv)\nmock_repo.save.assert_called_once()\n</code></pre>"},{"location":"architecture/domain-events/","title":"Eventos de Dominio","text":""},{"location":"architecture/domain-events/#contexto-cv-analysis","title":"Contexto: CV Analysis","text":""},{"location":"architecture/domain-events/#cvuploaded","title":"CVUploaded","text":"<pre><code>from dataclasses import dataclass\nfrom datetime import datetime\nfrom uuid import UUID\nfrom typing import Optional\n\n@dataclass(frozen=True)\nclass CVUploaded:\n    cv_id: UUID\n    file_name: str\n    mime_type: str\n    uploaded_at: datetime\n    process_id: UUID\n</code></pre>"},{"location":"architecture/domain-events/#cvanalysiscompleted","title":"CVAnalysisCompleted","text":"<pre><code>@dataclass(frozen=True)\nclass CandidateInfo:\n    name: str\n    email: str\n    phone: str\n\n@dataclass(frozen=True)\nclass Experience:\n    company: str\n    position: str\n    start_date: datetime\n    end_date: Optional[datetime]\n    description: str\n\n@dataclass(frozen=True)\nclass Education:\n    degree: str\n    institution: str\n    graduation_year: int\n\n@dataclass(frozen=True)\nclass CVAnalysisCompleted:\n    cv_id: UUID\n    analysis_id: UUID\n    candidate_info: CandidateInfo\n    extracted_data: dict[str, any]\n    completed_at: datetime\n</code></pre>"},{"location":"architecture/domain-events/#cvevaluationcompleted","title":"CVEvaluationCompleted","text":"<pre><code>from enum import Enum\n\nclass Recommendation(str, Enum):\n    APPROVE = \"APPROVE\"\n    REVIEW = \"REVIEW\"\n    REJECT = \"REJECT\"\n\n@dataclass(frozen=True)\nclass CVEvaluationCompleted:\n    cv_id: UUID\n    process_id: UUID\n    evaluation_score: float\n    main_reason: str\n    positive_aspects: list[str]\n    requirements_match: float\n    recommendation: Recommendation\n</code></pre>"},{"location":"architecture/domain-events/#contexto-recruitment-process","title":"Contexto: Recruitment Process","text":""},{"location":"architecture/domain-events/#processcreated","title":"ProcessCreated","text":"<pre><code>@dataclass(frozen=True)\nclass EvaluationCriteria:\n    technical_skills: float\n    experience: float\n    education: float\n\n@dataclass(frozen=True)\nclass ProcessCreated:\n    process_id: UUID\n    title: str\n    requirements: list[str]\n    evaluation_criteria: EvaluationCriteria\n    created_at: datetime\n</code></pre>"},{"location":"architecture/domain-events/#processstatuschanged","title":"ProcessStatusChanged","text":"<pre><code>class ProcessStatus(str, Enum):\n    DRAFT = \"DRAFT\"\n    ACTIVE = \"ACTIVE\"\n    PAUSED = \"PAUSED\"\n    COMPLETED = \"COMPLETED\"\n\n@dataclass(frozen=True)\nclass ProcessStatusChanged:\n    process_id: UUID\n    old_status: ProcessStatus\n    new_status: ProcessStatus\n    changed_at: datetime\n    reason: str\n</code></pre>"},{"location":"architecture/domain-events/#contexto-candidates","title":"Contexto: Candidates","text":""},{"location":"architecture/domain-events/#candidatecreated","title":"CandidateCreated","text":"<pre><code>@dataclass(frozen=True)\nclass CandidateCreated:\n    candidate_id: UUID\n    name: str\n    email: str\n    phone: str\n    process_id: UUID\n    cv_id: UUID\n    created_at: datetime\n</code></pre>"},{"location":"architecture/domain-events/#candidatestatusupdated","title":"CandidateStatusUpdated","text":"<pre><code>class CandidateStatus(str, Enum):\n    NEW = \"NEW\"\n    UNDER_REVIEW = \"UNDER_REVIEW\"\n    APPROVED = \"APPROVED\"\n    REJECTED = \"REJECTED\"\n\n@dataclass(frozen=True)\nclass CandidateStatusUpdated:\n    candidate_id: UUID\n    process_id: UUID\n    old_status: CandidateStatus\n    new_status: CandidateStatus\n    updated_at: datetime\n    reason: str\n</code></pre>"},{"location":"architecture/domain-events/#manejo-de-eventos","title":"Manejo de Eventos","text":""},{"location":"architecture/domain-events/#event-bus","title":"Event Bus","text":"<pre><code>from abc import ABC, abstractmethod\nfrom typing import Callable, Type\n\nclass EventBus(ABC):\n    @abstractmethod\n    async def publish(self, event: any) -&gt; None:\n        pass\n\n    @abstractmethod\n    def subscribe(self, event_type: Type[any], handler: Callable) -&gt; None:\n        pass\n\nclass InMemoryEventBus(EventBus):\n    def __init__(self):\n        self._handlers: dict[Type[any], list[Callable]] = {}\n\n    async def publish(self, event: any) -&gt; None:\n        event_type = type(event)\n        if event_type in self._handlers:\n            for handler in self._handlers[event_type]:\n                await handler(event)\n\n    def subscribe(self, event_type: Type[any], handler: Callable) -&gt; None:\n        if event_type not in self._handlers:\n            self._handlers[event_type] = []\n        self._handlers[event_type].append(handler)\n</code></pre>"},{"location":"architecture/domain-events/#ejemplo-de-uso","title":"Ejemplo de Uso","text":"<pre><code>class CVAnalysisService:\n    def __init__(self, event_bus: EventBus):\n        self._event_bus = event_bus\n\n    async def analyze_cv(self, cv: any) -&gt; None:\n        # Realizar an\u00e1lisis\n        analysis_result = await self._perform_analysis(cv)\n\n        # Publicar evento\n        event = CVAnalysisCompleted(\n            cv_id=cv.id,\n            analysis_id=UUID(),\n            candidate_info=analysis_result.candidate_info,\n            extracted_data=analysis_result.data,\n            completed_at=datetime.utcnow()\n        )\n        await self._event_bus.publish(event)\n\n# Suscriptor\nasync def handle_cv_analysis_completed(event: CVAnalysisCompleted) -&gt; None:\n    # Iniciar evaluaci\u00f3n\n    pass\n\n# Configuraci\u00f3n\nevent_bus = InMemoryEventBus()\nevent_bus.subscribe(CVAnalysisCompleted, handle_cv_analysis_completed)\n</code></pre>"},{"location":"architecture/domain-events/#consideraciones","title":"Consideraciones","text":"<ul> <li>Eventos inmutables (usando dataclasses frozen)</li> <li>Tipado estricto para mejor seguridad</li> <li>Manejo as\u00edncrono de eventos</li> <li>Registro de eventos para auditor\u00eda</li> </ul>"},{"location":"architecture/system-design/","title":"Dise\u00f1o del Sistema","text":""},{"location":"architecture/system-design/#componentes-principales","title":"Componentes Principales","text":""},{"location":"architecture/system-design/#1-modulo-de-gestion-de-cvs","title":"1. M\u00f3dulo de Gesti\u00f3n de CVs","text":"<ul> <li>Prop\u00f3sito: Gestionar el repositorio de curr\u00edculums</li> <li>Responsabilidades:</li> <li>Carga masiva de CVs</li> <li>Organizaci\u00f3n por proceso de selecci\u00f3n</li> <li>Extracci\u00f3n inicial de metadatos</li> <li>Control de versiones de documentos</li> </ul>"},{"location":"architecture/system-design/#2-procesador-de-cvs-con-ia","title":"2. Procesador de CVs con IA","text":"<ul> <li>Prop\u00f3sito: An\u00e1lisis y extracci\u00f3n de informaci\u00f3n de CVs</li> <li>Responsabilidades:</li> <li>Extracci\u00f3n de datos estructurados</li> <li>An\u00e1lisis de habilidades y experiencia</li> <li>Evaluaci\u00f3n seg\u00fan criterios del proceso</li> <li>Generaci\u00f3n de res\u00famenes y puntos clave</li> </ul>"},{"location":"architecture/system-design/#3-gestor-de-procesos-de-seleccion","title":"3. Gestor de Procesos de Selecci\u00f3n","text":"<ul> <li>Prop\u00f3sito: Administraci\u00f3n de procesos activos</li> <li>Responsabilidades:</li> <li>Mantenimiento de requisitos y descripciones</li> <li>Gesti\u00f3n de criterios de evaluaci\u00f3n</li> <li>Configuraci\u00f3n de prompts espec\u00edficos</li> <li>Seguimiento de estados del proceso</li> </ul>"},{"location":"architecture/system-design/#4-base-de-datos","title":"4. Base de Datos","text":"<ul> <li>Prop\u00f3sito: Almacenamiento estructurado de informaci\u00f3n</li> <li>Responsabilidades:</li> <li>Datos de candidatos</li> <li>Procesos de selecci\u00f3n</li> <li>Evaluaciones y resultados</li> <li>Hist\u00f3rico de cambios</li> </ul>"},{"location":"architecture/system-design/#5-panel-de-administracion","title":"5. Panel de Administraci\u00f3n","text":"<ul> <li>Prop\u00f3sito: Interfaz para equipo de RRHH</li> <li>Responsabilidades:</li> <li>Gesti\u00f3n de procesos</li> <li>Visualizaci\u00f3n de candidatos</li> <li>Configuraci\u00f3n de criterios</li> <li>Reportes y estad\u00edsticas</li> </ul>"},{"location":"architecture/system-design/#flujo-de-datos","title":"Flujo de Datos","text":"<ol> <li>Carga de CV \u2192 Repositorio</li> <li>CV \u2192 Procesador de IA</li> <li>Datos Estructurados \u2192 Base de Datos</li> <li>Proceso de Selecci\u00f3n \u2192 Criterios de Evaluaci\u00f3n</li> <li>Evaluaci\u00f3n \u2192 Resultados en Panel Admin</li> </ol>"},{"location":"architecture/system-design/#modelo-de-datos","title":"Modelo de Datos","text":""},{"location":"architecture/system-design/#candidatos","title":"Candidatos","text":"<pre><code>CREATE TABLE candidates (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    phone VARCHAR(20),\n    email VARCHAR(100),\n    evaluation_score DECIMAL,\n    main_reason TEXT,\n    positive_aspects TEXT[],\n    relevant_experience TEXT,\n    key_skills TEXT[],\n    requirements_match DECIMAL,\n    cv_path VARCHAR(255),\n    created_at TIMESTAMP,\n    updated_at TIMESTAMP\n);\n</code></pre>"},{"location":"architecture/system-design/#procesos-de-seleccion","title":"Procesos de Selecci\u00f3n","text":"<pre><code>CREATE TABLE recruitment_processes (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(100),\n    description TEXT,\n    requirements TEXT[],\n    conditions TEXT,\n    evaluation_criteria JSONB,\n    status VARCHAR(20),\n    prompt_template TEXT,\n    created_at TIMESTAMP,\n    updated_at TIMESTAMP\n);\n</code></pre>"},{"location":"architecture/system-design/#integraciones","title":"Integraciones","text":"<ul> <li>OpenAI API (GPT-4)</li> <li>Sistema de almacenamiento de archivos</li> <li>Sistema de autenticaci\u00f3n</li> <li>Generador de reportes</li> </ul>"},{"location":"architecture/decisions/","title":"Decisiones de Arquitectura","text":"<p>Este directorio contiene los registros de decisiones de arquitectura (ADR) para el proyecto de sistema de reclutamiento.</p>"},{"location":"architecture/decisions/#que-es-un-adr","title":"\u00bfQu\u00e9 es un ADR?","text":"<p>Un ADR es un documento que captura una decisi\u00f3n arquitect\u00f3nica importante junto con su contexto y consecuencias. Es una manera de documentar las decisiones t\u00e9cnicas significativas tomadas en el proyecto.</p>"},{"location":"architecture/decisions/#formato","title":"Formato","text":"<p>Cada ADR sigue este formato: 1. T\u00edtulo: Breve y descriptivo 2. Estado: Propuesto, Aceptado, Deprecado, Reemplazado 3. Contexto: El problema que llev\u00f3 a la decisi\u00f3n 4. Decisi\u00f3n: La soluci\u00f3n elegida 5. Consecuencias: Impacto positivo y negativo 6. Referencias: Enlaces y documentaci\u00f3n relevante</p>"},{"location":"architecture/decisions/#indice-de-adrs","title":"\u00cdndice de ADRs","text":""},{"location":"architecture/decisions/#fundamentales","title":"Fundamentales","text":"<ol> <li>Adoptar Clean Architecture y DDD</li> <li>Estructura base del proyecto</li> <li>Principios arquitect\u00f3nicos</li> <li> <p>Organizaci\u00f3n de c\u00f3digo</p> </li> <li> <p>Usar ULID como Identificador</p> </li> <li>Sistema de identificadores</li> <li>Ventajas sobre UUID</li> <li>Implementaci\u00f3n t\u00e9cnica</li> </ol>"},{"location":"architecture/decisions/#tecnicos","title":"T\u00e9cnicos","text":"<ol> <li>Desarrollo Async-First</li> <li>Programaci\u00f3n as\u00edncrona</li> <li>Manejo de concurrencia</li> <li> <p>Background tasks</p> </li> <li> <p>Integraci\u00f3n con OpenAI</p> </li> <li>An\u00e1lisis de CV con IA</li> <li>Configuraci\u00f3n del modelo</li> <li>Manejo de prompts</li> </ol>"},{"location":"architecture/decisions/#convenciones-de-nombrado","title":"Convenciones de Nombrado","text":"<p>Los archivos ADR siguen estas convenciones: 1. Nombres en min\u00fasculas con guiones 2. Prefijo num\u00e9rico de 4 d\u00edgitos 3. Extensi\u00f3n .md</p> <p>Ejemplo: <code>0001-adopt-clean-architecture.md</code></p>"},{"location":"architecture/decisions/#mantenimiento","title":"Mantenimiento","text":"<ul> <li>Los ADRs son inmutables una vez aceptados</li> <li>Nuevas decisiones crean nuevos ADRs</li> <li>Los cambios se registran como nuevos ADRs que referencian los anteriores</li> <li>El estado se actualiza para reflejar deprecaci\u00f3n o reemplazo</li> </ul>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/","title":"1. Adoptar Clean Architecture y DDD","text":"<p>Fecha: 2023-11-15</p>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/#estado","title":"Estado","text":"<p>Aceptado</p>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/#contexto","title":"Contexto","text":"<p>Necesitamos una arquitectura que permita: - Escalabilidad del sistema - Mantenibilidad del c\u00f3digo - Testabilidad de componentes - Independencia de frameworks - Separaci\u00f3n clara de responsabilidades</p>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/#decision","title":"Decisi\u00f3n","text":"<p>Adoptaremos Clean Architecture junto con principios de Domain-Driven Design (DDD) por:</p>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/#clean-architecture","title":"Clean Architecture","text":"<ol> <li>Capas Independientes:</li> <li>Domain: L\u00f3gica de negocio y entidades</li> <li>Application: Casos de uso</li> <li>Infrastructure: Implementaciones t\u00e9cnicas</li> <li> <p>Interface: APIs y UI</p> </li> <li> <p>Principios:</p> </li> <li>Dependency Rule: Las dependencias apuntan hacia adentro</li> <li>Entities: Reglas de negocio centrales</li> <li>Use Cases: Reglas de aplicaci\u00f3n espec\u00edficas</li> <li>Interface Adapters: Conversi\u00f3n de datos</li> <li>Frameworks &amp; Drivers: Detalles t\u00e9cnicos</li> </ol>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/#domain-driven-design","title":"Domain-Driven Design","text":"<ol> <li>Bounded Contexts:</li> <li>Recruitment Processes</li> <li>CV Analysis</li> <li>Candidates</li> <li> <p>Shared Kernel</p> </li> <li> <p>Patrones T\u00e1cticos:</p> </li> <li>Entidades y Value Objects</li> <li>Agregados y Repositorios</li> <li>Eventos de Dominio</li> <li>Servicios de Dominio</li> </ol>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/#implementacion","title":"Implementaci\u00f3n","text":""},{"location":"architecture/decisions/0001-adopt-clean-architecture/#estructura-de-directorios","title":"Estructura de Directorios","text":"<pre><code>src/\n\u251c\u2500\u2500 apps/\n\u2502   \u2514\u2500\u2500 api/\n\u2514\u2500\u2500 contexts/\n    \u251c\u2500\u2500 shared/\n    \u251c\u2500\u2500 recruitment_processes/\n    \u251c\u2500\u2500 cv_analysis/\n    \u2514\u2500\u2500 candidates/\n        \u251c\u2500\u2500 domain/\n        \u251c\u2500\u2500 application/\n        \u2514\u2500\u2500 infrastructure/\n</code></pre>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/#ejemplo-de-implementacion","title":"Ejemplo de Implementaci\u00f3n","text":"<pre><code># Domain\n@dataclass\nclass Process:\n    id: ULID\n    title: str\n    requirements: List[str]\n\n# Application\nclass CreateProcessUseCase:\n    def __init__(self, repository: ProcessRepository):\n        self.repository = repository\n\n    async def execute(self, data: dict) -&gt; Process:\n        process = Process.create(data)\n        return await self.repository.save(process)\n\n# Infrastructure\nclass PostgresProcessRepository(ProcessRepository):\n    async def save(self, process: Process) -&gt; Process:\n        # Implementaci\u00f3n espec\u00edfica\n        pass\n</code></pre>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/#consecuencias","title":"Consecuencias","text":""},{"location":"architecture/decisions/0001-adopt-clean-architecture/#positivas","title":"Positivas","text":"<ul> <li>C\u00f3digo altamente testeable</li> <li>Dominio rico y expresivo</li> <li>Cambios aislados por contexto</li> <li>Independencia de frameworks</li> <li>Mantenibilidad mejorada</li> </ul>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/#negativas","title":"Negativas","text":"<ul> <li>Mayor complejidad inicial</li> <li>M\u00e1s c\u00f3digo boilerplate</li> <li>Curva de aprendizaje</li> <li>Overhead en proyectos peque\u00f1os</li> </ul>"},{"location":"architecture/decisions/0001-adopt-clean-architecture/#referencias","title":"Referencias","text":"<ul> <li>Clean Architecture (Robert C. Martin)</li> <li>Domain-Driven Design (Eric Evans)</li> <li>Hexagonal Architecture (Alistair Cockburn)</li> </ul>"},{"location":"architecture/decisions/0002-use-ulid-as-identifier/","title":"2. Usar ULID como Identificador","text":"<p>Fecha: 2023-11-15</p>"},{"location":"architecture/decisions/0002-use-ulid-as-identifier/#estado","title":"Estado","text":"<p>Aceptado</p>"},{"location":"architecture/decisions/0002-use-ulid-as-identifier/#contexto","title":"Contexto","text":"<p>Necesitamos un sistema de identificadores \u00fanicos para nuestras entidades que sea: - Globalmente \u00fanico - Ordenable temporalmente - Seguro para URLs - Eficiente en bases de datos</p>"},{"location":"architecture/decisions/0002-use-ulid-as-identifier/#decision","title":"Decisi\u00f3n","text":"<p>Usaremos ULID (Universally Unique Lexicographically Sortable Identifier) en lugar de UUID por las siguientes ventajas:</p> <ol> <li>Ordenaci\u00f3n Temporal: Los ULID est\u00e1n ordenados lexicogr\u00e1ficamente y contienen un timestamp, lo que facilita:</li> <li>Ordenaci\u00f3n natural por fecha de creaci\u00f3n</li> <li>Indexaci\u00f3n m\u00e1s eficiente en bases de datos</li> <li> <p>Mejor rendimiento en consultas por rango</p> </li> <li> <p>Formato Amigable:</p> </li> <li>26 caracteres en Base32 (vs 36 caracteres del UUID)</li> <li>Seguros para URLs sin necesidad de encoding</li> <li> <p>M\u00e1s legibles que los UUID</p> </li> <li> <p>Compatibilidad:</p> </li> <li>Mantiene la unicidad global como UUID</li> <li>Compatible con sistemas existentes</li> <li>F\u00e1cil de integrar con diferentes bases de datos</li> </ol>"},{"location":"architecture/decisions/0002-use-ulid-as-identifier/#implementacion","title":"Implementaci\u00f3n","text":"<p>Usaremos la biblioteca <code>python-ulid</code> que proporciona: - Generaci\u00f3n thread-safe de ULIDs - Serializaci\u00f3n/deserializaci\u00f3n - Compatibilidad con UUID cuando sea necesario</p> <p>Ejemplo de ULID: <pre><code>01ARZ3NDEKTSV4RRFFQ69G5FAV\n</code></pre></p> <p>Donde: - Los primeros 10 caracteres son el timestamp en milisegundos - Los siguientes 16 caracteres son aleatorios</p>"},{"location":"architecture/decisions/0002-use-ulid-as-identifier/#consecuencias","title":"Consecuencias","text":""},{"location":"architecture/decisions/0002-use-ulid-as-identifier/#positivas","title":"Positivas","text":"<ul> <li>Mejor rendimiento en consultas de base de datos</li> <li>IDs ordenables temporalmente</li> <li>M\u00e1s cortos y legibles que UUID</li> <li>No requieren \u00edndices adicionales para ordenaci\u00f3n temporal</li> </ul>"},{"location":"architecture/decisions/0002-use-ulid-as-identifier/#negativas","title":"Negativas","text":"<ul> <li>Menos soporte nativo en algunas bases de datos</li> <li>Requiere biblioteca adicional</li> <li>Posible necesidad de migraci\u00f3n de datos existentes</li> </ul>"},{"location":"architecture/decisions/0003-async-first-development/","title":"3. Desarrollo Async-First","text":"<p>Fecha: 2023-11-15</p>"},{"location":"architecture/decisions/0003-async-first-development/#estado","title":"Estado","text":"<p>Aceptado</p>"},{"location":"architecture/decisions/0003-async-first-development/#contexto","title":"Contexto","text":"<p>El sistema necesita manejar: - Procesamiento de CVs en background - An\u00e1lisis de IA que pueden ser lentos - M\u00faltiples conexiones simult\u00e1neas - Operaciones I/O intensivas</p>"},{"location":"architecture/decisions/0003-async-first-development/#decision","title":"Decisi\u00f3n","text":"<p>Adoptaremos un enfoque \"async-first\" utilizando:</p> <ol> <li>FastAPI y ASGI:</li> <li>Framework as\u00edncrono nativo</li> <li>Alto rendimiento</li> <li>Soporte para WebSockets</li> <li> <p>Documentaci\u00f3n autom\u00e1tica</p> </li> <li> <p>SQLAlchemy 2.0:</p> </li> <li>ORM as\u00edncrono</li> <li>Soporte para conexiones pooling</li> <li> <p>Transacciones as\u00edncronas</p> </li> <li> <p>Celery para Tareas:</p> </li> <li>Procesamiento en background</li> <li>Escalabilidad horizontal</li> <li>Monitoreo de tareas</li> <li>Reintentos autom\u00e1ticos</li> </ol>"},{"location":"architecture/decisions/0003-async-first-development/#implementacion","title":"Implementaci\u00f3n","text":""},{"location":"architecture/decisions/0003-async-first-development/#api-asincrona","title":"API As\u00edncrona","text":"<pre><code>@router.post(\"/processes\")\nasync def create_process(\n    request: CreateProcessRequest,\n    use_case: CreateProcessUseCase = Depends()\n) -&gt; ProcessResponse:\n    return await use_case.execute(request)\n</code></pre>"},{"location":"architecture/decisions/0003-async-first-development/#repositorio-asincrono","title":"Repositorio As\u00edncrono","text":"<pre><code>class AsyncProcessRepository:\n    async def save(self, process: Process) -&gt; Process:\n        async with self.session() as session:\n            await session.add(process)\n            await session.commit()\n            return process\n</code></pre>"},{"location":"architecture/decisions/0003-async-first-development/#tareas-background","title":"Tareas Background","text":"<pre><code>@celery_app.task(retry_policy={\n    'max_retries': 3,\n    'interval_start': 0,\n    'interval_step': 0.2,\n    'interval_max': 0.5,\n})\nasync def analyze_cv(cv_id: str) -&gt; dict:\n    # An\u00e1lisis as\u00edncrono\n    pass\n</code></pre>"},{"location":"architecture/decisions/0003-async-first-development/#consecuencias","title":"Consecuencias","text":""},{"location":"architecture/decisions/0003-async-first-development/#positivas","title":"Positivas","text":"<ul> <li>Mejor uso de recursos</li> <li>Mayor concurrencia</li> <li>Escalabilidad mejorada</li> <li>Responsividad de la API</li> </ul>"},{"location":"architecture/decisions/0003-async-first-development/#negativas","title":"Negativas","text":"<ul> <li>Complejidad adicional</li> <li>Debugging m\u00e1s dif\u00edcil</li> <li>Necesidad de manejo de errores as\u00edncrono</li> <li>Curva de aprendizaje para desarrolladores</li> </ul>"},{"location":"architecture/decisions/0003-async-first-development/#referencias","title":"Referencias","text":"<ul> <li>FastAPI Documentation</li> <li>SQLAlchemy 2.0 Documentation</li> <li>Celery Best Practices</li> </ul>"},{"location":"architecture/decisions/0004-openai-integration/","title":"4. Integraci\u00f3n con OpenAI","text":"<p>Fecha: 2023-11-15</p>"},{"location":"architecture/decisions/0004-openai-integration/#estado","title":"Estado","text":"<p>Aceptado</p>"},{"location":"architecture/decisions/0004-openai-integration/#contexto","title":"Contexto","text":"<p>Necesitamos un sistema de an\u00e1lisis de CV que: - Extraiga informaci\u00f3n relevante - Eval\u00fae candidatos objetivamente - Genere recomendaciones detalladas - Sea adaptable a diferentes roles</p>"},{"location":"architecture/decisions/0004-openai-integration/#decision","title":"Decisi\u00f3n","text":"<p>Utilizaremos la API de OpenAI con GPT-4 por:</p> <ol> <li>Capacidades del Modelo:</li> <li>Comprensi\u00f3n de contexto superior</li> <li>An\u00e1lisis multiling\u00fce</li> <li>Extracci\u00f3n precisa de informaci\u00f3n</li> <li> <p>Evaluaci\u00f3n consistente</p> </li> <li> <p>Implementaci\u00f3n:</p> </li> <li>API REST moderna</li> <li>SDK oficial para Python</li> <li>Rate limiting incluido</li> <li> <p>Manejo de errores robusto</p> </li> <li> <p>Modelo Espec\u00edfico: GPT-4</p> </li> <li>Mayor precisi\u00f3n que GPT-3.5</li> <li>Mejor comprensi\u00f3n de contexto</li> <li>Capacidad de seguir instrucciones complejas</li> <li>An\u00e1lisis m\u00e1s detallado</li> </ol>"},{"location":"architecture/decisions/0004-openai-integration/#implementacion","title":"Implementaci\u00f3n","text":""},{"location":"architecture/decisions/0004-openai-integration/#prompt-template","title":"Prompt Template","text":"<pre><code>class CVAnalysisPrompt:\n    @staticmethod\n    def create(cv_text: str, requirements: List[str]) -&gt; str:\n        return f\"\"\"\n        Analiza el siguiente CV para el puesto que requiere:\n        {requirements}\n\n        CV:\n        {cv_text}\n\n        Proporciona una evaluaci\u00f3n estructurada incluyendo:\n        1. Coincidencia con requisitos\n        2. A\u00f1os de experiencia relevante\n        3. Habilidades t\u00e9cnicas\n        4. Recomendaciones\n        \"\"\"\n</code></pre>"},{"location":"architecture/decisions/0004-openai-integration/#servicio-de-analisis","title":"Servicio de An\u00e1lisis","text":"<pre><code>class OpenAICVAnalyzer:\n    def __init__(self, api_key: str, model: str = \"gpt-4\"):\n        self.client = OpenAI(api_key=api_key)\n        self.model = model\n\n    async def analyze(\n        self,\n        cv_text: str,\n        requirements: List[str]\n    ) -&gt; dict:\n        prompt = CVAnalysisPrompt.create(cv_text, requirements)\n\n        response = await self.client.chat.completions.create(\n            model=self.model,\n            messages=[\n                {\"role\": \"system\", \"content\": \"Eres un experto en RRHH...\"},\n                {\"role\": \"user\", \"content\": prompt}\n            ],\n            temperature=0.2\n        )\n\n        return self._parse_response(response)\n</code></pre>"},{"location":"architecture/decisions/0004-openai-integration/#manejo-de-rate-limits","title":"Manejo de Rate Limits","text":"<pre><code>from tenacity import (\n    retry,\n    stop_after_attempt,\n    wait_exponential\n)\n\n@retry(\n    stop=stop_after_attempt(3),\n    wait=wait_exponential(multiplier=1, min=4, max=10)\n)\nasync def analyze_with_retry(\n    analyzer: OpenAICVAnalyzer,\n    cv_text: str,\n    requirements: List[str]\n) -&gt; dict:\n    return await analyzer.analyze(cv_text, requirements)\n</code></pre>"},{"location":"architecture/decisions/0004-openai-integration/#consecuencias","title":"Consecuencias","text":""},{"location":"architecture/decisions/0004-openai-integration/#positivas","title":"Positivas","text":"<ul> <li>An\u00e1lisis de alta calidad</li> <li>R\u00e1pida implementaci\u00f3n</li> <li>Actualizaciones autom\u00e1ticas del modelo</li> <li>Flexibilidad en evaluaci\u00f3n</li> </ul>"},{"location":"architecture/decisions/0004-openai-integration/#negativas","title":"Negativas","text":"<ul> <li>Costo por uso</li> <li>Dependencia de servicio externo</li> <li>Latencia en respuestas</li> <li>Necesidad de prompt engineering</li> </ul>"},{"location":"architecture/decisions/0004-openai-integration/#mitigaciones","title":"Mitigaciones","text":"<ol> <li>Costos:</li> <li>Cach\u00e9 de resultados</li> <li>Batch processing</li> <li> <p>Monitoreo de uso</p> </li> <li> <p>Disponibilidad:</p> </li> <li>Circuit breaker</li> <li>Fallback local</li> <li> <p>Reintentos inteligentes</p> </li> <li> <p>Latencia:</p> </li> <li>Procesamiento as\u00edncrono</li> <li>An\u00e1lisis en background</li> <li>Resultados parciales</li> </ol>"},{"location":"architecture/decisions/0004-openai-integration/#referencias","title":"Referencias","text":"<ul> <li>OpenAI API Documentation</li> <li>GPT-4 Technical Report</li> <li>Rate Limiting Best Practices</li> </ul>"},{"location":"architecture/decisions/0005-ai-processing-stack/","title":"5. Stack de Procesamiento de IA","text":"<p>Fecha: 2023-11-15</p>"},{"location":"architecture/decisions/0005-ai-processing-stack/#estado","title":"Estado","text":"<p>Propuesto</p>"},{"location":"architecture/decisions/0005-ai-processing-stack/#contexto","title":"Contexto","text":"<p>Necesitamos un sistema robusto para: - Procesar y analizar CVs a escala - B\u00fasqueda sem\u00e1ntica de candidatos - Orquestaci\u00f3n compleja de flujos de IA - Monitoreo y optimizaci\u00f3n de prompts - Almacenamiento vectorial eficiente</p>"},{"location":"architecture/decisions/0005-ai-processing-stack/#decision","title":"Decisi\u00f3n","text":"<p>Implementaremos un stack completo de procesamiento de IA:</p>"},{"location":"architecture/decisions/0005-ai-processing-stack/#1-langchain","title":"1. LangChain","text":"<ul> <li>Prop\u00f3sito: Framework para aplicaciones de IA</li> <li>Usos:</li> <li>Cadenas de procesamiento de documentos</li> <li>Manejo de memoria y contexto</li> <li>Integraci\u00f3n con m\u00faltiples LLMs</li> <li>Plantillas de prompts reutilizables</li> </ul>"},{"location":"architecture/decisions/0005-ai-processing-stack/#2-langgraph","title":"2. LangGraph","text":"<ul> <li>Prop\u00f3sito: Orquestaci\u00f3n de flujos de IA</li> <li>Usos:</li> <li>Flujos de trabajo complejos</li> <li>M\u00e1quinas de estado para procesos</li> <li>Toma de decisiones multi-paso</li> <li>Retroalimentaci\u00f3n y ciclos</li> </ul>"},{"location":"architecture/decisions/0005-ai-processing-stack/#3-qdrant","title":"3. Qdrant","text":"<ul> <li>Prop\u00f3sito: Base de datos vectorial</li> <li>Usos:</li> <li>Almacenamiento de embeddings de CV</li> <li>B\u00fasqueda sem\u00e1ntica de candidatos</li> <li>Filtrado por metadatos</li> <li>Clustering de perfiles</li> </ul>"},{"location":"architecture/decisions/0005-ai-processing-stack/#4-langsmith","title":"4. LangSmith","text":"<ul> <li>Prop\u00f3sito: Monitoreo y debugging</li> <li>Usos:</li> <li>Evaluaci\u00f3n de prompts</li> <li>Trazabilidad de decisiones</li> <li>M\u00e9tricas de rendimiento</li> <li>Testing de cadenas</li> </ul>"},{"location":"architecture/decisions/0005-ai-processing-stack/#implementacion","title":"Implementaci\u00f3n","text":""},{"location":"architecture/decisions/0005-ai-processing-stack/#procesamiento-de-cvs","title":"Procesamiento de CVs","text":"<pre><code>from langchain.document_loaders import PyPDFLoader\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.vectorstores import Qdrant\n\nclass CVProcessor:\n    def __init__(self):\n        self.embeddings = OpenAIEmbeddings()\n        self.vector_store = Qdrant(\n            client=QdrantClient(),\n            collection_name=\"cvs\",\n            embeddings=self.embeddings\n        )\n\n    async def process_cv(self, cv_file: UploadFile) -&gt; str:\n        # Cargar y dividir documento\n        loader = PyPDFLoader(cv_file)\n        documents = loader.load()\n        text_splitter = RecursiveCharacterTextSplitter()\n        splits = text_splitter.split_documents(documents)\n\n        # Almacenar en Qdrant\n        ids = await self.vector_store.aadd_documents(splits)\n        return ids[0]\n</code></pre>"},{"location":"architecture/decisions/0005-ai-processing-stack/#flujo-de-evaluacion","title":"Flujo de Evaluaci\u00f3n","text":"<pre><code>from langgraph.graph import Graph\nfrom langchain.chat_models import ChatOpenAI\n\ndef create_evaluation_graph():\n    # Nodos del grafo\n    nodes = {\n        \"extract\": extract_info,\n        \"evaluate\": evaluate_candidate,\n        \"recommend\": make_recommendation\n    }\n\n    # Definir flujo\n    graph = Graph(nodes)\n    graph.add_edge(\"extract\", \"evaluate\")\n    graph.add_edge(\"evaluate\", \"recommend\")\n\n    return graph\n\nasync def run_evaluation(cv_id: str, job_requirements: List[str]):\n    graph = create_evaluation_graph()\n    result = await graph.arun({\n        \"cv_id\": cv_id,\n        \"requirements\": job_requirements\n    })\n    return result\n</code></pre>"},{"location":"architecture/decisions/0005-ai-processing-stack/#busqueda-de-candidatos","title":"B\u00fasqueda de Candidatos","text":"<pre><code>class CandidateSearch:\n    async def search_similar(\n        self,\n        description: str,\n        top_k: int = 5\n    ) -&gt; List[dict]:\n        results = await self.vector_store.asimilarity_search_with_score(\n            description,\n            k=top_k\n        )\n        return [\n            {\n                \"candidate_id\": doc.metadata[\"candidate_id\"],\n                \"score\": score,\n                \"summary\": doc.page_content\n            }\n            for doc, score in results\n        ]\n</code></pre>"},{"location":"architecture/decisions/0005-ai-processing-stack/#monitoreo-con-langsmith","title":"Monitoreo con LangSmith","text":"<pre><code>from langsmith import Client\n\nclass EvaluationMonitor:\n    def __init__(self):\n        self.client = Client()\n\n    async def track_evaluation(\n        self,\n        cv_id: str,\n        evaluation_result: dict\n    ):\n        run = await self.client.create_run(\n            name=\"cv_evaluation\",\n            inputs={\n                \"cv_id\": cv_id,\n                \"result\": evaluation_result\n            }\n        )\n        await self.client.update_run(\n            run.id,\n            outputs=evaluation_result,\n            end_time=datetime.utcnow()\n        )\n</code></pre>"},{"location":"architecture/decisions/0005-ai-processing-stack/#consecuencias","title":"Consecuencias","text":""},{"location":"architecture/decisions/0005-ai-processing-stack/#positivas","title":"Positivas","text":"<ul> <li>Framework completo y probado</li> <li>B\u00fasqueda sem\u00e1ntica potente</li> <li>Flujos de trabajo flexibles</li> <li>Monitoreo detallado</li> <li>Escalabilidad</li> </ul>"},{"location":"architecture/decisions/0005-ai-processing-stack/#negativas","title":"Negativas","text":"<ul> <li>Complejidad adicional</li> <li>Costos de infraestructura</li> <li>Mantenimiento de vectores</li> <li>Curva de aprendizaje</li> </ul>"},{"location":"architecture/decisions/0005-ai-processing-stack/#mitigaciones","title":"Mitigaciones","text":"<ol> <li>Complejidad:</li> <li>Documentaci\u00f3n detallada</li> <li>Patrones comunes</li> <li> <p>Testing exhaustivo</p> </li> <li> <p>Costos:</p> </li> <li>Caching de embeddings</li> <li>Optimizaci\u00f3n de chunks</li> <li> <p>Monitoreo de uso</p> </li> <li> <p>Mantenimiento:</p> </li> <li>Actualizaci\u00f3n peri\u00f3dica</li> <li>Pruebas de regresi\u00f3n</li> <li>Backups regulares</li> </ol>"},{"location":"architecture/decisions/0005-ai-processing-stack/#referencias","title":"Referencias","text":"<ul> <li>LangChain Documentation</li> <li>Qdrant Documentation</li> <li>LangGraph Examples</li> <li>LangSmith Best Practices</li> </ul>"},{"location":"architecture/decisions/0006-whatsapp-integration/","title":"6. Integraci\u00f3n con WhatsApp usando BuilderBot","text":"<p>Fecha: 2023-11-15</p>"},{"location":"architecture/decisions/0006-whatsapp-integration/#estado","title":"Estado","text":"<p>Propuesto</p>"},{"location":"architecture/decisions/0006-whatsapp-integration/#contexto","title":"Contexto","text":"<p>Necesitamos: - Canal de comunicaci\u00f3n directo con candidatos - Interfaz conversacional accesible - Procesamiento autom\u00e1tico de respuestas - Integraci\u00f3n con nuestro sistema de IA - Integraci\u00f3n con backend Python existente</p>"},{"location":"architecture/decisions/0006-whatsapp-integration/#decision","title":"Decisi\u00f3n","text":"<p>Implementaremos BuilderBot como un microservicio independiente:</p>"},{"location":"architecture/decisions/0006-whatsapp-integration/#1-arquitectura-de-microservicios","title":"1. Arquitectura de Microservicios","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  WhatsApp Bot   \u2502      \u2502  Core Backend    \u2502\n\u2502   (Node.js)     \u2502\u25c4\u2500\u2500\u2500\u2500\u25ba\u2502    (Python)      \u2502\n\u2502   BuilderBot    \u2502      \u2502   FastAPI        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u25b2                        \u25b2\n         \u2502                        \u2502\n         \u25bc                        \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502    Message      \u2502      \u2502   Recruitment    \u2502\n\u2502     Queue       \u2502      \u2502    Database      \u2502\n\u2502   (RabbitMQ)    \u2502      \u2502   (PostgreSQL)   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/decisions/0006-whatsapp-integration/#2-componentes-del-sistema","title":"2. Componentes del Sistema","text":"<ul> <li>WhatsApp Service (Node.js/BuilderBot):</li> <li>Manejo de conexi\u00f3n WhatsApp</li> <li>Flujos conversacionales b\u00e1sicos</li> <li>Queue de mensajes</li> <li> <p>Forwarding a backend Python</p> </li> <li> <p>Core Backend (Python/FastAPI):</p> </li> <li>L\u00f3gica de negocio principal</li> <li>Procesamiento de CV</li> <li>An\u00e1lisis de IA</li> <li>Gesti\u00f3n de candidatos</li> </ul>"},{"location":"architecture/decisions/0006-whatsapp-integration/#3-comunicacion-entre-servicios","title":"3. Comunicaci\u00f3n entre Servicios","text":"<pre><code>// WhatsApp Service (BuilderBot)\nconst cvFlow = addKeyword(['cv', 'aplicar'])\n    .addAnswer('Por favor, env\u00eda tu CV en PDF.')\n    .addAction(async (ctx, { flowDynamic }) =&gt; {\n        // Enviar a cola de mensajes\n        await messageQueue.publish('cv.received', {\n            whatsappId: ctx.from,\n            attachment: ctx.message.attachment,\n            timestamp: Date.now()\n        })\n\n        await flowDynamic('Gracias, procesaremos tu CV.')\n    })\n\n// Escuchar respuestas del backend\nmessageQueue.subscribe('cv.processed', async (data) =&gt; {\n    const { whatsappId, result } = data\n    await bot.sendMessage(whatsappId, result.summary)\n})\n</code></pre> <pre><code># Core Backend (Python/FastAPI)\nclass CVProcessor:\n    def __init__(self, message_queue: MessageQueue):\n        self.queue = message_queue\n\n    async def process_cv(self, message: dict):\n        # Procesar CV con nuestro stack de IA\n        cv_data = await self.analyze_cv(message['attachment'])\n\n        # Enviar resultado de vuelta al bot\n        await self.queue.publish('cv.processed', {\n            'whatsappId': message['whatsappId'],\n            'result': {\n                'summary': cv_data.summary,\n                'match_score': cv_data.score\n            }\n        })\n\n# Configuraci\u00f3n de FastAPI\napp = FastAPI()\nmessage_queue = RabbitMQ()\n\n@app.on_event(\"startup\")\nasync def startup():\n    await message_queue.subscribe('cv.received', \n                                CVProcessor().process_cv)\n</code></pre>"},{"location":"architecture/decisions/0006-whatsapp-integration/#4-message-queue-rabbitmq","title":"4. Message Queue (RabbitMQ)","text":"<ul> <li>Comunicaci\u00f3n as\u00edncrona entre servicios</li> <li>Garant\u00eda de entrega de mensajes</li> <li>Manejo de picos de carga</li> <li>Reintentos autom\u00e1ticos</li> </ul>"},{"location":"architecture/decisions/0006-whatsapp-integration/#implementacion","title":"Implementaci\u00f3n","text":""},{"location":"architecture/decisions/0006-whatsapp-integration/#1-flujos-principales","title":"1. Flujos Principales","text":"<ul> <li>Bienvenida y orientaci\u00f3n</li> <li>Recepci\u00f3n de CV</li> <li>Preguntas frecuentes</li> <li>Seguimiento de proceso</li> <li>Retroalimentaci\u00f3n</li> </ul>"},{"location":"architecture/decisions/0006-whatsapp-integration/#2-procesamiento-de-mensajes","title":"2. Procesamiento de Mensajes","text":"<pre><code>// Manejo de mensajes entrantes\nadapterProvider.server.post('/v1/messages', handleCtx(async (bot, req, res) =&gt; {\n    const { number, message, attachments } = req.body\n\n    if (attachments?.length &gt; 0) {\n        // Procesar CV adjunto\n        await handleCVUpload(attachments[0], number)\n    } else {\n        // Procesar mensaje normal\n        await bot.sendMessage(number, await processUserMessage(message))\n    }\n\n    return res.end('processed')\n}))\n</code></pre>"},{"location":"architecture/decisions/0006-whatsapp-integration/#3-integracion-con-ia","title":"3. Integraci\u00f3n con IA","text":"<pre><code>const cvAnalysisFlow = addKeyword('analizar')\n    .addAction(async (ctx, { flowDynamic }) =&gt; {\n        // Integrar con nuestro stack de IA\n        const analysis = await analyzeCV(ctx.cvId)\n        const summary = await generateCVSummary(analysis)\n        await flowDynamic(summary)\n    })\n</code></pre>"},{"location":"architecture/decisions/0006-whatsapp-integration/#consecuencias","title":"Consecuencias","text":""},{"location":"architecture/decisions/0006-whatsapp-integration/#positivas","title":"Positivas","text":"<ul> <li>Implementaci\u00f3n r\u00e1pida</li> <li>API bien documentada</li> <li>Soporte para m\u00faltiples proveedores</li> <li>Escalable y extensible</li> <li>Manejo robusto de eventos</li> <li>Separaci\u00f3n clara de responsabilidades</li> <li>Cada servicio en su lenguaje \u00f3ptimo</li> <li>Escalabilidad independiente</li> <li>Resiliencia mejorada</li> </ul>"},{"location":"architecture/decisions/0006-whatsapp-integration/#negativas","title":"Negativas","text":"<ul> <li>Dependencia de WhatsApp Business API</li> <li>Limitaciones de API de WhatsApp</li> <li>Necesidad de manejar rate limits</li> <li>Gesti\u00f3n de sesiones</li> <li>Complejidad de infraestructura</li> <li>Necesidad de orquestaci\u00f3n</li> <li>Latencia adicional</li> <li>Mantenimiento de dos stacks</li> </ul>"},{"location":"architecture/decisions/0006-whatsapp-integration/#mitigaciones","title":"Mitigaciones","text":"<ol> <li>Rate Limits:</li> <li>Queue de mensajes</li> <li>Retry con backoff</li> <li> <p>Monitoreo de l\u00edmites</p> </li> <li> <p>Sesiones:</p> </li> <li>Cache distribuido</li> <li>Estado persistente</li> <li> <p>Recuperaci\u00f3n de errores</p> </li> <li> <p>Disponibilidad:</p> </li> <li>Healthchecks</li> <li>Logs detallados</li> <li> <p>Sistema de alertas</p> </li> <li> <p>Complejidad:</p> </li> <li>Docker Compose para desarrollo</li> <li>Kubernetes para producci\u00f3n</li> <li>Monitoreo centralizado</li> <li> <p>Logs unificados</p> </li> <li> <p>Latencia:</p> </li> <li>Optimizaci\u00f3n de colas</li> <li>Cach\u00e9 distribuido</li> <li>Conexiones persistentes</li> <li> <p>Batch processing</p> </li> <li> <p>Mantenimiento:</p> </li> <li>CI/CD separados</li> <li>Testing end-to-end</li> <li>Documentaci\u00f3n detallada</li> <li>M\u00e9tricas por servicio</li> </ol>"},{"location":"architecture/decisions/0006-whatsapp-integration/#referencias","title":"Referencias","text":"<ul> <li>BuilderBot Documentation</li> <li>WhatsApp Business API</li> <li>Clean Architecture Guidelines</li> <li>Event-Driven Design Patterns</li> <li>FastAPI Documentation</li> <li>RabbitMQ Documentation</li> </ul>"},{"location":"architecture/decisions/0007-shared-kernel/","title":"7. Shared Kernel para Bounded Contexts","text":"<p>Fecha: 2023-11-15</p>"},{"location":"architecture/decisions/0007-shared-kernel/#estado","title":"Estado","text":"<p>Propuesto</p>"},{"location":"architecture/decisions/0007-shared-kernel/#contexto","title":"Contexto","text":"<p>Necesitamos un shared kernel que: - Proporcione c\u00f3digo com\u00fan entre bounded contexts - Defina contratos de integraci\u00f3n - Mantenga la consistencia del dominio - Facilite la comunicaci\u00f3n entre contextos</p>"},{"location":"architecture/decisions/0007-shared-kernel/#decision","title":"Decisi\u00f3n","text":"<p>Implementaremos un shared kernel siguiendo la estructura actual del proyecto:</p>"},{"location":"architecture/decisions/0007-shared-kernel/#1-estructura","title":"1. Estructura","text":"<pre><code>src/\n\u2514\u2500\u2500 shared-kernel/           # Kernel compartido\n    \u251c\u2500\u2500 domain/             # L\u00f3gica de dominio compartida\n    \u2502   \u251c\u2500\u2500 value-objects/  # Value Objects comunes\n    \u2502   \u2502   \u251c\u2500\u2500 email.py\n    \u2502   \u2502   \u251c\u2500\u2500 phone.py\n    \u2502   \u2502   \u2514\u2500\u2500 ulid.py\n    \u2502   \u2514\u2500\u2500 events/        # Eventos de dominio\n    \u2502       \u251c\u2500\u2500 cv_analyzed.py\n    \u2502       \u2514\u2500\u2500 process_updated.py\n    \u2514\u2500\u2500 infrastructure/    # Implementaciones t\u00e9cnicas\n        \u251c\u2500\u2500 persistence/   # Componentes de persistencia\n        \u2502   \u251c\u2500\u2500 repository.py\n        \u2502   \u2514\u2500\u2500 unit_of_work.py\n        \u251c\u2500\u2500 messaging/     # Mensajer\u00eda entre contextos\n        \u2502   \u251c\u2500\u2500 publisher.py\n        \u2502   \u2514\u2500\u2500 subscriber.py\n        \u2514\u2500\u2500 services/      # Servicios compartidos\n            \u251c\u2500\u2500 openai.py\n            \u2514\u2500\u2500 storage.py\n</code></pre>"},{"location":"architecture/decisions/0007-shared-kernel/#2-componentes-principales","title":"2. Componentes Principales","text":""},{"location":"architecture/decisions/0007-shared-kernel/#domain-layer","title":"Domain Layer","text":"<pre><code># Value Objects\n@dataclass(frozen=True)\nclass Email:\n    value: str\n\n    @classmethod\n    def create(cls, value: str) -&gt; 'Email':\n        if not re.match(r\"[^@]+@[^@]+\\.[^@]+\", value):\n            raise ValueError(\"Invalid email format\")\n        return cls(value)\n\n# Domain Events\nclass CVAnalyzed(DomainEvent):\n    cv_id: ULID\n    process_id: ULID\n    score: float\n    skills: List[str]\n    summary: str\n</code></pre>"},{"location":"architecture/decisions/0007-shared-kernel/#infrastructure-layer","title":"Infrastructure Layer","text":"<pre><code># Repository Base\nclass Repository(Generic[T]):\n    async def save(self, entity: T) -&gt; T:\n        raise NotImplementedError\n\n    async def get_by_id(self, id: ULID) -&gt; Optional[T]:\n        raise NotImplementedError\n\n# Event Publisher\nclass EventPublisher:\n    async def publish(self, event: DomainEvent) -&gt; None:\n        raise NotImplementedError\n</code></pre>"},{"location":"architecture/decisions/0007-shared-kernel/#3-contratos-de-integracion","title":"3. Contratos de Integraci\u00f3n","text":"<pre><code># Interfaces\nclass CVAnalyzer(Protocol):\n    async def analyze(self, cv: bytes) -&gt; CVAnalysisResult:\n        ...\n\nclass ProcessRepository(Protocol):\n    async def get_active_processes(self) -&gt; List[Process]:\n        ...\n\n# DTOs\n@dataclass\nclass CVAnalysisResult:\n    id: ULID\n    score: float\n    skills: List[str]\n    experience: List[Experience]\n    summary: str\n</code></pre>"},{"location":"architecture/decisions/0007-shared-kernel/#implementacion","title":"Implementaci\u00f3n","text":""},{"location":"architecture/decisions/0007-shared-kernel/#1-value-objects-compartidos","title":"1. Value Objects Compartidos","text":"<pre><code>@dataclass(frozen=True)\nclass ULID:\n    value: str\n\n    @classmethod\n    def generate(cls) -&gt; 'ULID':\n        return cls(ulid.new().str)\n\n    def __str__(self) -&gt; str:\n        return self.value\n</code></pre>"},{"location":"architecture/decisions/0007-shared-kernel/#2-eventos-de-dominio","title":"2. Eventos de Dominio","text":"<pre><code>class DomainEvent:\n    id: ULID\n    timestamp: datetime\n    aggregate_id: ULID\n\n    def to_dict(self) -&gt; dict:\n        return asdict(self)\n\nclass ProcessCreated(DomainEvent):\n    title: str\n    requirements: List[str]\n    status: ProcessStatus\n</code></pre>"},{"location":"architecture/decisions/0007-shared-kernel/#3-servicios-compartidos","title":"3. Servicios Compartidos","text":"<pre><code>class OpenAIService:\n    def __init__(self, api_key: str):\n        self.client = OpenAI(api_key=api_key)\n\n    async def analyze_text(self, text: str) -&gt; dict:\n        response = await self.client.chat.completions.create(\n            model=\"gpt-4\",\n            messages=[{\"role\": \"user\", \"content\": text}]\n        )\n        return response.choices[0].message.content\n</code></pre>"},{"location":"architecture/decisions/0007-shared-kernel/#consecuencias","title":"Consecuencias","text":""},{"location":"architecture/decisions/0007-shared-kernel/#positivas","title":"Positivas","text":"<ul> <li>C\u00f3digo reutilizable</li> <li>Contratos claros</li> <li>Consistencia entre contextos</li> <li>Mejor mantenibilidad</li> </ul>"},{"location":"architecture/decisions/0007-shared-kernel/#negativas","title":"Negativas","text":"<ul> <li>Acoplamiento entre contextos</li> <li>Necesidad de coordinaci\u00f3n</li> <li>Posible sobrecarga</li> <li>Gesti\u00f3n de dependencias</li> </ul>"},{"location":"architecture/decisions/0007-shared-kernel/#mitigaciones","title":"Mitigaciones","text":"<ol> <li>Acoplamiento:</li> <li>Interfaces claras</li> <li>Dependencias m\u00ednimas</li> <li>Versiones estables</li> <li> <p>Tests exhaustivos</p> </li> <li> <p>Coordinaci\u00f3n:</p> </li> <li>Documentaci\u00f3n clara</li> <li>Code reviews</li> <li>Gu\u00edas de contribuci\u00f3n</li> <li> <p>Ownership definido</p> </li> <li> <p>Mantenimiento:</p> </li> <li>CI/CD robusto</li> <li>Versionado sem\u00e1ntico</li> <li>Breaking changes policy</li> <li>Monitoreo de uso</li> </ol>"},{"location":"architecture/decisions/0007-shared-kernel/#referencias","title":"Referencias","text":"<ul> <li>Clean Architecture</li> <li>Domain-Driven Design</li> <li>Event-Driven Architecture</li> <li>SOLID Principles</li> </ul>"},{"location":"deployment/configuration/","title":"Configuraci\u00f3n y Despliegue","text":""},{"location":"deployment/configuration/#requisitos-del-sistema","title":"Requisitos del Sistema","text":""},{"location":"deployment/configuration/#python-y-dependencias","title":"Python y Dependencias","text":"<pre><code># Python 3.11+\npython --version\nPython 3.11.0\n\n# Dependencias principales\npip install -r requirements.txt\n</code></pre>"},{"location":"deployment/configuration/#requirementstxt","title":"requirements.txt","text":"<pre><code>fastapi==0.104.1\nuvicorn==0.24.0\npydantic==2.5.1\nsqlalchemy==2.0.23\nalembic==1.12.1\npsycopg2-binary==2.9.9\npython-multipart==0.0.6\nopenai==1.3.3\npython-jose==3.3.0\npasslib==1.7.4\nredis==5.0.1\ncelery==5.3.4\nboto3==1.29.3\npytest==7.4.3\npytest-asyncio==0.21.1\nmypy==1.7.0\nblack==23.10.1\nisort==5.12.0\n</code></pre>"},{"location":"deployment/configuration/#variables-de-entorno","title":"Variables de Entorno","text":""},{"location":"deployment/configuration/#api","title":"API","text":"<pre><code># Server\nAPI_HOST=0.0.0.0\nAPI_PORT=8000\nAPI_WORKERS=4\nDEBUG=False\nAPI_PREFIX=/api/v1\nCORS_ORIGINS=[\"http://localhost:3000\"]\n\n# Database\nDATABASE_URL=postgresql://user:password@localhost:5432/recruitment\nDATABASE_POOL_SIZE=20\nDATABASE_MAX_OVERFLOW=10\n\n# OpenAI\nOPENAI_API_KEY=sk-...\nOPENAI_MODEL=gpt-4\nOPENAI_MAX_TOKENS=2000\n\n# Storage\nSTORAGE_TYPE=s3\nAWS_BUCKET_NAME=recruitment-cvs\nAWS_ACCESS_KEY_ID=\nAWS_SECRET_ACCESS_KEY=\nAWS_REGION=us-east-1\n\n# Authentication\nJWT_SECRET=your-secret-key\nJWT_ALGORITHM=HS256\nJWT_EXPIRATION_MINUTES=1440  # 24 hours\n\n# Logging\nLOG_LEVEL=INFO\nLOG_FORMAT=%(asctime)s - %(name)s - %(levelname)s - %(message)s\n</code></pre>"},{"location":"deployment/configuration/#workers","title":"Workers","text":"<pre><code># Celery\nCELERY_BROKER_URL=redis://localhost:6379/0\nCELERY_RESULT_BACKEND=redis://localhost:6379/1\nCELERY_TASK_SERIALIZER=json\nCELERY_RESULT_SERIALIZER=json\n\n# Processing\nMAX_CONCURRENT_ANALYSIS=5\nANALYSIS_TIMEOUT=300  # seconds\n</code></pre>"},{"location":"deployment/configuration/#docker","title":"Docker","text":""},{"location":"deployment/configuration/#dockerfile","title":"Dockerfile","text":"<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    postgresql-client \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Run migrations\nRUN alembic upgrade head\n\nEXPOSE 8000\n\nCMD [\"uvicorn\", \"src.apps.api.main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"]\n</code></pre>"},{"location":"deployment/configuration/#docker-compose","title":"Docker Compose","text":"<pre><code>version: '3.8'\n\nservices:\n  api:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DATABASE_URL=postgresql://user:password@db:5432/recruitment\n      - CELERY_BROKER_URL=redis://redis:6379/0\n    depends_on:\n      - db\n      - redis\n    volumes:\n      - ./:/app\n    command: uvicorn src.apps.api.main:app --host 0.0.0.0 --port 8000 --reload\n\n  worker:\n    build: .\n    environment:\n      - DATABASE_URL=postgresql://user:password@db:5432/recruitment\n      - CELERY_BROKER_URL=redis://redis:6379/0\n    depends_on:\n      - redis\n      - db\n    command: celery -A src.apps.workers.celery_app worker --loglevel=info\n\n  db:\n    image: postgres:14-alpine\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=recruitment\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n\nvolumes:\n  postgres_data:\n  redis_data:\n</code></pre>"},{"location":"deployment/configuration/#base-de-datos","title":"Base de Datos","text":""},{"location":"deployment/configuration/#migraciones-con-alembic","title":"Migraciones con Alembic","text":"<pre><code># alembic/env.py\nfrom logging.config import fileConfig\nfrom sqlalchemy import engine_from_config\nfrom alembic import context\nfrom src.contexts.shared.infrastructure.persistence.models import Base\n\nconfig = context.config\ntarget_metadata = Base.metadata\n\ndef run_migrations_online() -&gt; None:\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection,\n            target_metadata=target_metadata\n        )\n        with context.begin_transaction():\n            context.run_migrations()\n</code></pre>"},{"location":"deployment/configuration/#indices","title":"\u00cdndices","text":"<pre><code>-- B\u00fasqueda de texto completo en CVs\nCREATE INDEX idx_cv_content ON cvs USING gin(to_tsvector('spanish', content));\n\n-- B\u00fasqueda por estado de candidato\nCREATE INDEX idx_candidate_status ON candidates(status);\n\n-- B\u00fasqueda compuesta por proceso\nCREATE INDEX idx_candidate_process ON candidates(process_id, status);\n</code></pre>"},{"location":"deployment/configuration/#cicd","title":"CI/CD","text":""},{"location":"deployment/configuration/#github-actions","title":"GitHub Actions","text":"<pre><code>name: CI/CD\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    services:\n      postgres:\n        image: postgres:14\n        env:\n          POSTGRES_USER: test\n          POSTGRES_PASSWORD: test\n          POSTGRES_DB: test\n        ports:\n          - 5432:5432\n        options: &gt;-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Set up Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install -r requirements.txt\n\n      - name: Run type checking\n        run: mypy src\n\n      - name: Run tests\n        run: |\n          pytest tests/\n        env:\n          DATABASE_URL: postgresql://test:test@localhost:5432/test\n\n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - name: Deploy to production\n        # Pasos de despliegue\n</code></pre>"},{"location":"deployment/configuration/#monitoreo","title":"Monitoreo","text":""},{"location":"deployment/configuration/#metricas-con-prometheus","title":"M\u00e9tricas con Prometheus","text":"<pre><code>from prometheus_client import Counter, Histogram\nfrom fastapi import FastAPI\nfrom prometheus_fastapi_instrumentator import Instrumentator\n\napp = FastAPI()\n\n# M\u00e9tricas personalizadas\ncv_processing_duration = Histogram(\n    'cv_processing_duration_seconds',\n    'Time spent processing CVs'\n)\n\ncv_analysis_errors = Counter(\n    'cv_analysis_errors_total',\n    'Total number of CV analysis errors'\n)\n\n# Instrumentaci\u00f3n autom\u00e1tica\nInstrumentator().instrument(app).expose(app)\n</code></pre>"},{"location":"deployment/configuration/#logging","title":"Logging","text":"<pre><code>import logging\nimport structlog\n\ndef setup_logging():\n    logging.basicConfig(\n        format=\"%(message)s\",\n        level=logging.INFO,\n    )\n\n    structlog.configure(\n        processors=[\n            structlog.processors.TimeStamper(fmt=\"iso\"),\n            structlog.stdlib.add_log_level,\n            structlog.processors.JSONRenderer()\n        ],\n        context_class=dict,\n        logger_factory=structlog.stdlib.LoggerFactory(),\n        wrapper_class=structlog.stdlib.BoundLogger,\n        cache_logger_on_first_use=True,\n    )\n\nlogger = structlog.get_logger()\n</code></pre>"},{"location":"deployment/configuration/#backups","title":"Backups","text":""},{"location":"deployment/configuration/#base-de-datos_1","title":"Base de Datos","text":"<pre><code>import subprocess\nfrom datetime import datetime\n\ndef backup_database():\n    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n    backup_file = f'backup_{timestamp}.dump'\n\n    # Crear backup\n    subprocess.run([\n        'pg_dump',\n        '-Fc',\n        '-h', 'localhost',\n        '-U', 'user',\n        '-d', 'recruitment',\n        '-f', backup_file\n    ])\n\n    # Subir a S3\n    subprocess.run([\n        'aws', 's3', 'cp',\n        backup_file,\n        f's3://recruitment-backups/{backup_file}'\n    ])\n</code></pre>"},{"location":"deployment/configuration/#archivos","title":"Archivos","text":"<p>```python import boto3 from datetime import datetime</p> <p>def backup_files():     s3 = boto3.client('s3')     timestamp = datetime.now().strftime('%Y/%m/%d')</p> <pre><code># Copiar CVs a bucket de backup\ns3.sync(\n    's3://recruitment-cvs',\n    f's3://recruitment-backups/cvs/{timestamp}'\n)\n</code></pre>"},{"location":"flows/conversation-flows/","title":"Flujos de Conversaci\u00f3n","text":""},{"location":"flows/conversation-flows/#1-bienvenida-e-inicio","title":"1. Bienvenida e Inicio","text":"<pre><code>graph TD\n    A[Inicio] --&gt; B{\u00bfPrimera vez?}\n    B --&gt;|S\u00ed| C[Explicar proceso]\n    B --&gt;|No| D[Men\u00fa principal]\n    C --&gt; D\n    D --&gt; E[Mostrar opciones]\n</code></pre>"},{"location":"flows/conversation-flows/#2-proceso-de-postulacion","title":"2. Proceso de Postulaci\u00f3n","text":""},{"location":"flows/conversation-flows/#flujo-principal","title":"Flujo Principal","text":"<ol> <li>Bienvenida</li> <li>Solicitud de informaci\u00f3n b\u00e1sica</li> <li>Nombre completo</li> <li>Correo electr\u00f3nico</li> <li>Tel\u00e9fono</li> <li>Solicitud de CV</li> <li>Preguntas de filtro inicial</li> <li>Confirmaci\u00f3n y siguiente pasos</li> </ol>"},{"location":"flows/conversation-flows/#preguntas-de-filtro","title":"Preguntas de Filtro","text":"<ul> <li>Experiencia relevante</li> <li>Disponibilidad</li> <li>Expectativas salariales</li> <li>Ubicaci\u00f3n/Modalidad preferida</li> </ul>"},{"location":"flows/conversation-flows/#3-seguimiento-de-postulacion","title":"3. Seguimiento de Postulaci\u00f3n","text":"<ul> <li>Consulta de estado</li> <li>Actualizaci\u00f3n de informaci\u00f3n</li> <li>Programaci\u00f3n de entrevistas</li> </ul>"},{"location":"flows/conversation-flows/#4-mensajes-automatizados","title":"4. Mensajes Automatizados","text":""},{"location":"flows/conversation-flows/#templates","title":"Templates","text":"<ol> <li>Confirmaci\u00f3n de recepci\u00f3n</li> <li>Solicitud de informaci\u00f3n adicional</li> <li>Programaci\u00f3n de entrevista</li> <li>Actualizaci\u00f3n de estado</li> <li>Feedback inicial</li> </ol>"},{"location":"flows/conversation-flows/#5-flujos-de-error","title":"5. Flujos de Error","text":""},{"location":"flows/conversation-flows/#manejo-de-situaciones","title":"Manejo de Situaciones","text":"<ul> <li>CV en formato no soportado</li> <li>Informaci\u00f3n incompleta</li> <li>Timeout en respuestas</li> <li>Problemas t\u00e9cnicos</li> </ul>"},{"location":"integrations/openai-integration/","title":"Integraci\u00f3n con OpenAI","text":""},{"location":"integrations/openai-integration/#funcionalidades","title":"Funcionalidades","text":""},{"location":"integrations/openai-integration/#1-analisis-de-cv","title":"1. An\u00e1lisis de CV","text":"<ul> <li>Extracci\u00f3n de informaci\u00f3n clave</li> <li>Identificaci\u00f3n de habilidades</li> <li>Evaluaci\u00f3n de experiencia</li> <li>Detecci\u00f3n de palabras clave</li> </ul>"},{"location":"integrations/openai-integration/#2-evaluacion-de-respuestas","title":"2. Evaluaci\u00f3n de Respuestas","text":"<ul> <li>An\u00e1lisis de respuestas a preguntas abiertas</li> <li>Evaluaci\u00f3n de coherencia</li> <li>Detecci\u00f3n de red flags</li> </ul>"},{"location":"integrations/openai-integration/#3-generacion-de-preguntas","title":"3. Generaci\u00f3n de Preguntas","text":"<ul> <li>Preguntas personalizadas basadas en CV</li> <li>Adaptaci\u00f3n seg\u00fan el perfil del puesto</li> <li>Seguimiento contextual</li> </ul>"},{"location":"integrations/openai-integration/#implementacion","title":"Implementaci\u00f3n","text":""},{"location":"integrations/openai-integration/#modelos-a-utilizar","title":"Modelos a Utilizar","text":"<ol> <li>GPT-4</li> <li>An\u00e1lisis profundo de texto</li> <li>Generaci\u00f3n de preguntas</li> <li> <p>Evaluaci\u00f3n de respuestas</p> </li> <li> <p>GPT-3.5-turbo</p> </li> <li>Interacciones r\u00e1pidas</li> <li>Respuestas simples</li> <li>Procesamiento inicial</li> </ol>"},{"location":"integrations/openai-integration/#prompts-base","title":"Prompts Base","text":"<pre><code># An\u00e1lisis de CV\nAnaliza el siguiente CV y extrae:\n1. Experiencia relevante\n2. Habilidades t\u00e9cnicas\n3. Habilidades blandas\n4. Formaci\u00f3n acad\u00e9mica\n5. Logros destacados\n\n# Evaluaci\u00f3n de Ajuste\nEval\u00faa el ajuste del candidato para [PUESTO] considerando:\n1. Requisitos m\u00ednimos\n2. Experiencia requerida\n3. Habilidades necesarias\n</code></pre>"},{"location":"integrations/openai-integration/#consideraciones-de-seguridad","title":"Consideraciones de Seguridad","text":"<ul> <li>Manejo seguro de datos personales</li> <li>L\u00edmites de uso de API</li> <li>Almacenamiento de resultados</li> <li>Cumplimiento de GDPR/LGPD</li> </ul>"},{"location":"integrations/whatsapp-integration/","title":"Integraci\u00f3n con WhatsApp","text":""},{"location":"integrations/whatsapp-integration/#configuracion","title":"Configuraci\u00f3n","text":""},{"location":"integrations/whatsapp-integration/#1-whatsapp-business-api","title":"1. WhatsApp Business API","text":"<ul> <li>Requisitos de configuraci\u00f3n</li> <li>Proceso de verificaci\u00f3n</li> <li>L\u00edmites y restricciones</li> </ul>"},{"location":"integrations/whatsapp-integration/#2-templates-de-mensajes","title":"2. Templates de Mensajes","text":""},{"location":"integrations/whatsapp-integration/#plantillas-requeridas","title":"Plantillas Requeridas","text":"<ol> <li> <p>Bienvenida <pre><code>Hola [NOMBRE], gracias por tu inter\u00e9s en [EMPRESA].\nPara comenzar tu proceso de postulaci\u00f3n, necesitar\u00e9 hacerte algunas preguntas.\n\u00bfEst\u00e1s de acuerdo en continuar?\n</code></pre></p> </li> <li> <p>Solicitud de CV <pre><code>Por favor, env\u00eda tu CV en formato PDF o Word.\nAseg\u00farate que el archivo est\u00e9 actualizado y contenga tu informaci\u00f3n de contacto.\n</code></pre></p> </li> <li> <p>Confirmaci\u00f3n <pre><code>Hemos recibido tu CV correctamente.\nEn breve comenzaremos con el an\u00e1lisis de tu perfil.\nTe mantendremos informado sobre el proceso.\n</code></pre></p> </li> <li> <p>Actualizaci\u00f3n de Estado <pre><code>Hola [NOMBRE],\nTu postulaci\u00f3n para [PUESTO] ha sido [ESTADO].\n[SIGUIENTE_PASO]\n</code></pre></p> </li> </ol>"},{"location":"integrations/whatsapp-integration/#manejo-de-conversaciones","title":"Manejo de Conversaciones","text":""},{"location":"integrations/whatsapp-integration/#estados-de-conversacion","title":"Estados de Conversaci\u00f3n","text":"<ol> <li>INICIAL</li> <li>RECOPILANDO_INFO</li> <li>ESPERANDO_CV</li> <li>EN_EVALUACION</li> <li>PROGRAMANDO_ENTREVISTA</li> <li>FINALIZADO</li> </ol>"},{"location":"integrations/whatsapp-integration/#timeouts-y-recordatorios","title":"Timeouts y Recordatorios","text":"<ul> <li>Tiempo m\u00e1ximo de espera por respuesta</li> <li>Recordatorios autom\u00e1ticos</li> <li>Cierre de conversaciones inactivas</li> </ul>"},{"location":"integrations/whatsapp-integration/#limitaciones-y-consideraciones","title":"Limitaciones y Consideraciones","text":"<ul> <li>Tama\u00f1o m\u00e1ximo de archivos</li> <li>Formatos soportados</li> <li>Frecuencia de mensajes</li> <li>Horarios de atenci\u00f3n</li> </ul>"},{"location":"processes/cv-processing/","title":"Procesamiento de CVs","text":""},{"location":"processes/cv-processing/#flujo-de-procesamiento","title":"Flujo de Procesamiento","text":""},{"location":"processes/cv-processing/#1-preparacion","title":"1. Preparaci\u00f3n","text":"<ul> <li>Conversi\u00f3n de CV a texto (PDF/Word \u2192 texto plano)</li> <li>Limpieza y normalizaci\u00f3n de datos</li> <li>Extracci\u00f3n de metadatos b\u00e1sicos</li> </ul>"},{"location":"processes/cv-processing/#2-analisis-con-openai","title":"2. An\u00e1lisis con OpenAI","text":""},{"location":"processes/cv-processing/#prompt-base-para-analisis-de-cv","title":"Prompt Base para An\u00e1lisis de CV","text":"<pre><code>Analiza el siguiente CV y extrae la informaci\u00f3n en formato JSON con la siguiente estructura:\n\n{\n    \"datos_personales\": {\n        \"nombre\": \"\",\n        \"telefono\": \"\",\n        \"email\": \"\"\n    },\n    \"experiencia_relevante\": [\n        {\n            \"empresa\": \"\",\n            \"cargo\": \"\",\n            \"periodo\": \"\",\n            \"responsabilidades_key\": []\n        }\n    ],\n    \"habilidades\": {\n        \"tecnicas\": [],\n        \"blandas\": []\n    },\n    \"educacion\": [\n        {\n            \"titulo\": \"\",\n            \"institucion\": \"\",\n            \"a\u00f1o\": \"\"\n        }\n    ],\n    \"logros_destacados\": []\n}\n\nCV a analizar:\n[CONTENIDO_CV]\n</code></pre>"},{"location":"processes/cv-processing/#prompt-de-evaluacion","title":"Prompt de Evaluaci\u00f3n","text":"<pre><code>Eval\u00faa el siguiente perfil para el puesto de [PUESTO] seg\u00fan estos criterios:\n\nRequisitos del puesto:\n[REQUISITOS]\n\nCondiciones:\n[CONDICIONES]\n\nPerfil del candidato:\n[PERFIL_JSON]\n\nGenera una evaluaci\u00f3n en formato JSON con:\n{\n    \"evaluacion_numerica\": 0-100,\n    \"razon_principal\": \"\",\n    \"aspectos_positivos\": [],\n    \"aspectos_mejorables\": [],\n    \"match_requisitos\": 0-100,\n    \"recomendacion\": \"APROBAR|REVISAR|RECHAZAR\"\n}\n</code></pre>"},{"location":"processes/cv-processing/#3-estructuracion-de-datos","title":"3. Estructuraci\u00f3n de Datos","text":"<ul> <li>Normalizaci\u00f3n de resultados</li> <li>Validaci\u00f3n de datos extra\u00eddos</li> <li>Enriquecimiento de informaci\u00f3n</li> </ul>"},{"location":"processes/cv-processing/#4-almacenamiento","title":"4. Almacenamiento","text":"<ul> <li>Registro en base de datos</li> <li>Indexaci\u00f3n para b\u00fasqueda</li> <li>Vinculaci\u00f3n con proceso de selecci\u00f3n</li> </ul>"},{"location":"processes/cv-processing/#configuracion-de-procesos","title":"Configuraci\u00f3n de Procesos","text":""},{"location":"processes/cv-processing/#definicion-de-proceso","title":"Definici\u00f3n de Proceso","text":"<pre><code>{\n    \"titulo\": \"Desarrollador Frontend Senior\",\n    \"descripcion\": \"Buscamos desarrollador frontend con experiencia...\",\n    \"requisitos\": [\n        \"5+ a\u00f1os de experiencia en React\",\n        \"Conocimientos de TypeScript\",\n        \"Experiencia en testing\"\n    ],\n    \"condiciones\": {\n        \"modalidad\": \"H\u00edbrido\",\n        \"ubicacion\": \"Santiago\",\n        \"tipo_contrato\": \"Indefinido\"\n    },\n    \"criterios_evaluacion\": {\n        \"experiencia_relevante\": 40,\n        \"habilidades_tecnicas\": 30,\n        \"habilidades_blandas\": 15,\n        \"formacion\": 15\n    },\n    \"prompt_template\": \"Personalizaci\u00f3n espec\u00edfica del prompt...\"\n}\n</code></pre>"},{"location":"processes/cv-processing/#metricas-y-reportes","title":"M\u00e9tricas y Reportes","text":"<ul> <li>Tasa de procesamiento exitoso</li> <li>Distribuci\u00f3n de evaluaciones</li> <li>Tiempo promedio de procesamiento</li> <li>Precisi\u00f3n de extracci\u00f3n de datos</li> </ul>"},{"location":"processes/recruitment/","title":"Proceso de Reclutamiento","text":""},{"location":"processes/recruitment/#flujo-principal","title":"Flujo Principal","text":"<pre><code>graph TD\n    A[Inicio] --&gt; B[Recepci\u00f3n CV]\n    B --&gt; C[An\u00e1lisis IA]\n    C --&gt; D{Evaluaci\u00f3n}\n    D --&gt;|Apto| E[Entrevista]\n    D --&gt;|No Apto| F[Feedback]\n    E --&gt; G[Decisi\u00f3n]\n    G --&gt;|Aceptado| H[Oferta]\n    G --&gt;|Rechazado| F\n</code></pre>"},{"location":"processes/recruitment/#etapas-del-proceso","title":"Etapas del Proceso","text":""},{"location":"processes/recruitment/#1-recepcion-de-cv","title":"1. Recepci\u00f3n de CV","text":"<ul> <li>Canal: WhatsApp</li> <li>Formato: PDF</li> <li>Validaciones iniciales</li> <li>Confirmaci\u00f3n autom\u00e1tica</li> </ul>"},{"location":"processes/recruitment/#2-analisis-ia","title":"2. An\u00e1lisis IA","text":"<ul> <li>Extracci\u00f3n de informaci\u00f3n</li> <li>Match con requisitos</li> <li>Evaluaci\u00f3n de experiencia</li> <li>Generaci\u00f3n de resumen</li> </ul>"},{"location":"processes/recruitment/#3-evaluacion","title":"3. Evaluaci\u00f3n","text":"<ul> <li>Criterios configurables</li> <li>Scoring autom\u00e1tico</li> <li>Flags importantes</li> <li>Recomendaciones</li> </ul>"},{"location":"processes/recruitment/#4-entrevista","title":"4. Entrevista","text":"<ul> <li>Agendamiento autom\u00e1tico</li> <li>Preguntas sugeridas</li> <li>Registro de feedback</li> <li>Evaluaci\u00f3n estructurada</li> </ul>"},{"location":"processes/recruitment/#5-decision","title":"5. Decisi\u00f3n","text":"<ul> <li>Criterios objetivos</li> <li>Matriz de evaluaci\u00f3n</li> <li>Aprobaciones requeridas</li> <li>Documentaci\u00f3n</li> </ul>"},{"location":"processes/recruitment/#6-feedback","title":"6. Feedback","text":"<ul> <li>Mensajes personalizados</li> <li>Recomendaciones</li> <li>Siguientes pasos</li> <li>Oportunidades futuras</li> </ul>"},{"location":"processes/recruitment/#estados-del-proceso","title":"Estados del Proceso","text":"<ol> <li>Inicial</li> <li>CV recibido</li> <li> <p>En an\u00e1lisis</p> </li> <li> <p>Evaluaci\u00f3n</p> </li> <li>Analizado</li> <li>En revisi\u00f3n</li> <li> <p>Evaluado</p> </li> <li> <p>Entrevista</p> </li> <li>Agendada</li> <li>Realizada</li> <li> <p>Pendiente feedback</p> </li> <li> <p>Final</p> </li> <li>Aceptado</li> <li>Rechazado</li> <li>En oferta</li> <li>Contratado</li> </ol>"},{"location":"processes/recruitment/#integraciones","title":"Integraciones","text":""},{"location":"processes/recruitment/#whatsapp","title":"WhatsApp","text":"<ul> <li>Recepci\u00f3n de documentos</li> <li>Comunicaci\u00f3n autom\u00e1tica</li> <li>Seguimiento de estado</li> <li>Feedback instant\u00e1neo</li> </ul>"},{"location":"processes/recruitment/#ia","title":"IA","text":"<ul> <li>An\u00e1lisis de CV</li> <li>Evaluaci\u00f3n objetiva</li> <li>Recomendaciones</li> <li>Generaci\u00f3n de feedback</li> </ul>"},{"location":"processes/recruitment/#sistema-core","title":"Sistema Core","text":"<ul> <li>Gesti\u00f3n de procesos</li> <li>Almacenamiento de datos</li> <li>Workflow automation</li> <li>Reportes y m\u00e9tricas</li> </ul>"},{"location":"processes/recruitment/#metricas","title":"M\u00e9tricas","text":"<ol> <li>Eficiencia</li> <li>Tiempo de procesamiento</li> <li>Tasa de conversi\u00f3n</li> <li>Precisi\u00f3n de IA</li> <li> <p>Satisfacci\u00f3n candidatos</p> </li> <li> <p>Calidad</p> </li> <li>Accuracy de evaluaciones</li> <li>Tasa de aceptaci\u00f3n</li> <li>Feedback positivo</li> <li>Retenci\u00f3n post-hire</li> </ol>"},{"location":"processes/recruitment/#consideraciones","title":"Consideraciones","text":""},{"location":"processes/recruitment/#privacidad","title":"Privacidad","text":"<ul> <li>Consentimiento expl\u00edcito</li> <li>Manejo de datos sensibles</li> <li>Retenci\u00f3n limitada</li> <li>Acceso controlado</li> </ul>"},{"location":"processes/recruitment/#escalabilidad","title":"Escalabilidad","text":"<ul> <li>Procesamiento paralelo</li> <li>Colas de mensajes</li> <li>Cache distribuido</li> <li>Load balancing</li> </ul>"},{"location":"processes/recruitment/#mantenibilidad","title":"Mantenibilidad","text":"<ul> <li>Logs detallados</li> <li>Monitoreo continuo</li> <li>Testing automatizado</li> <li>Documentaci\u00f3n actualizada</li> </ul>"},{"location":"technical/contributing/","title":"Gu\u00eda de Contribuci\u00f3n","text":""},{"location":"technical/contributing/#proceso-de-contribucion","title":"Proceso de Contribuci\u00f3n","text":""},{"location":"technical/contributing/#1-preparacion","title":"1. Preparaci\u00f3n","text":"<ul> <li>Fork del repositorio</li> <li>Clonar localmente</li> <li>Configurar remote upstream</li> </ul>"},{"location":"technical/contributing/#2-crear-branch","title":"2. Crear Branch","text":"<pre><code>git checkout main\ngit pull upstream main\ngit checkout -b feature/nombre-feature\n</code></pre>"},{"location":"technical/contributing/#3-desarrollo","title":"3. Desarrollo","text":"<ul> <li>Seguir gu\u00edas de estilo</li> <li>Escribir tests</li> <li>Documentar cambios</li> </ul>"},{"location":"technical/contributing/#4-commit","title":"4. Commit","text":"<pre><code># Formato de mensaje\n&lt;tipo&gt;(&lt;alcance&gt;): &lt;descripci\u00f3n&gt;\n\n# Ejemplos\nfeat(candidates): add CV analysis endpoint\nfix(whatsapp): correct message handling\ndocs(api): update OpenAPI specs\n</code></pre> <p>Tipos de commit: - <code>feat</code>: Nueva caracter\u00edstica - <code>fix</code>: Correcci\u00f3n de bug - <code>docs</code>: Documentaci\u00f3n - <code>style</code>: Formato - <code>refactor</code>: Refactorizaci\u00f3n - <code>test</code>: Tests - <code>chore</code>: Mantenimiento</p>"},{"location":"technical/contributing/#5-pull-request","title":"5. Pull Request","text":"<ul> <li>T\u00edtulo descriptivo</li> <li>Descripci\u00f3n detallada</li> <li>Referencias a issues</li> <li>Screenshots si aplica</li> </ul>"},{"location":"technical/contributing/#estandares-de-codigo","title":"Est\u00e1ndares de C\u00f3digo","text":""},{"location":"technical/contributing/#python","title":"Python","text":"<pre><code># Imports\nfrom typing import Optional\nimport datetime\n\n# Type hints\ndef process_candidate(\n    candidate_id: str,\n    score: Optional[float] = None\n) -&gt; bool:\n    pass\n\n# Docstrings\ndef analyze_cv(content: str) -&gt; dict:\n    \"\"\"\n    Analiza el contenido de un CV usando IA.\n\n    Args:\n        content: Contenido del CV en texto plano\n\n    Returns:\n        Dict con score y habilidades detectadas\n    \"\"\"\n    pass\n</code></pre>"},{"location":"technical/contributing/#typescript","title":"TypeScript","text":"<pre><code>// Interfaces\ninterface Message {\n  type: string;\n  content: string;\n  timestamp: Date;\n}\n\n// Type safety\nfunction processMessage(message: Message): Promise&lt;void&gt; {\n  // Implementation\n}\n\n// Error handling\nasync function sendMessage(to: string, content: string): Promise&lt;void&gt; {\n  try {\n    await whatsappClient.send(to, content);\n  } catch (error) {\n    logger.error('Failed to send message', { error, to });\n    throw new MessageDeliveryError(error.message);\n  }\n}\n</code></pre>"},{"location":"technical/contributing/#revision-de-codigo","title":"Revisi\u00f3n de C\u00f3digo","text":""},{"location":"technical/contributing/#checklist","title":"Checklist","text":"<ul> <li> Cumple con est\u00e1ndares de c\u00f3digo</li> <li> Tests pasan localmente</li> <li> Documentaci\u00f3n actualizada</li> <li> Sin c\u00f3digo comentado</li> <li> Manejo de errores apropiado</li> <li> Logging adecuado</li> <li> Performance considerada</li> <li> Seguridad revisada</li> </ul>"},{"location":"technical/contributing/#feedback","title":"Feedback","text":"<ul> <li>Constructivo y espec\u00edfico</li> <li>Enfocado en el c\u00f3digo</li> <li>Sugerir mejoras</li> <li>Reconocer buenos patrones</li> </ul>"},{"location":"technical/contributing/#cicd","title":"CI/CD","text":""},{"location":"technical/contributing/#checks-automaticos","title":"Checks Autom\u00e1ticos","text":"<ul> <li>Linting</li> <li>Type checking</li> <li>Tests</li> <li>Cobertura</li> <li>Seguridad</li> <li>Build</li> </ul>"},{"location":"technical/contributing/#deploy","title":"Deploy","text":"<ul> <li>Review apps</li> <li>Staging autom\u00e1tico</li> <li>Production manual</li> </ul>"},{"location":"technical/contributing/#documentacion","title":"Documentaci\u00f3n","text":""},{"location":"technical/contributing/#tipos","title":"Tipos","text":"<ol> <li>C\u00f3digo</li> <li>Docstrings</li> <li>Comentarios inline</li> <li> <p>Type hints</p> </li> <li> <p>API</p> </li> <li>OpenAPI/Swagger</li> <li>AsyncAPI</li> <li> <p>Postman collections</p> </li> <li> <p>Arquitectura</p> </li> <li>ADRs</li> <li>Diagramas</li> <li>Gu\u00edas t\u00e9cnicas</li> </ol>"},{"location":"technical/contributing/#seguridad","title":"Seguridad","text":""},{"location":"technical/contributing/#practicas","title":"Pr\u00e1cticas","text":"<ul> <li>No commits de secretos</li> <li>Validaci\u00f3n de inputs</li> <li>Sanitizaci\u00f3n de outputs</li> <li>HTTPS siempre</li> <li>Autenticaci\u00f3n/Autorizaci\u00f3n</li> </ul>"},{"location":"technical/contributing/#reporte-de-vulnerabilidades","title":"Reporte de Vulnerabilidades","text":"<ul> <li>Proceso privado</li> <li>Template detallado</li> <li>Respuesta r\u00e1pida</li> <li>Fix prioritario</li> </ul>"},{"location":"technical/contributing/#soporte","title":"Soporte","text":""},{"location":"technical/contributing/#canales","title":"Canales","text":"<ul> <li>GitHub Issues</li> <li>Slack</li> <li>Email</li> </ul>"},{"location":"technical/contributing/#templates","title":"Templates","text":"<ul> <li>Bug report</li> <li>Feature request</li> <li>Question</li> </ul>"},{"location":"technical/contributing/#licencia","title":"Licencia","text":"<p>Este proyecto est\u00e1 bajo la licencia MIT. Al contribuir: - Aceptas licenciar tu c\u00f3digo bajo MIT - Confirmas autor\u00eda original - Permites uso comercial</p>"},{"location":"technical/development/","title":"Gu\u00eda de Desarrollo","text":""},{"location":"technical/development/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<pre><code>.\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 core/           # Backend principal (Python/FastAPI)\n\u2502   \u2514\u2500\u2500 whatsapp/       # Servicio de WhatsApp (Node.js)\n\u251c\u2500\u2500 shared/             # Shared Kernel\n\u2502   \u251c\u2500\u2500 python/         # Implementaci\u00f3n Python\n\u2502   \u2514\u2500\u2500 typescript/     # Implementaci\u00f3n TypeScript\n\u2514\u2500\u2500 docs/              # Documentaci\u00f3n\n</code></pre>"},{"location":"technical/development/#estandares-de-codigo","title":"Est\u00e1ndares de C\u00f3digo","text":""},{"location":"technical/development/#python-core-backend","title":"Python (Core Backend)","text":"<ul> <li>Python 3.11+ con type hints</li> <li>Black para formateo</li> <li>isort para imports</li> <li>Flake8 para linting</li> <li>pytest para testing</li> <li>mypy para type checking</li> </ul>"},{"location":"technical/development/#typescript-whatsapp-service","title":"TypeScript (WhatsApp Service)","text":"<ul> <li>Node.js 18+</li> <li>ESLint con Prettier</li> <li>Jest para testing</li> <li>TypeScript strict mode</li> </ul>"},{"location":"technical/development/#flujo-de-desarrollo","title":"Flujo de Desarrollo","text":""},{"location":"technical/development/#1-crear-nueva-feature","title":"1. Crear Nueva Feature","text":"<pre><code># Crear rama feature\ngit checkout -b feature/nombre-feature\n\n# Activar pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"technical/development/#2-desarrollo-local","title":"2. Desarrollo Local","text":""},{"location":"technical/development/#core-backend","title":"Core Backend","text":"<pre><code>cd services/core\nuvicorn app.main:app --reload --port 8000\n</code></pre>"},{"location":"technical/development/#whatsapp-service","title":"WhatsApp Service","text":"<pre><code>cd services/whatsapp\nnpm run dev\n</code></pre>"},{"location":"technical/development/#3-testing","title":"3. Testing","text":"<pre><code># Core Backend\ncd services/core\npytest\npytest --cov=app\n\n# WhatsApp Service\ncd services/whatsapp\nnpm test\nnpm run test:coverage\n</code></pre>"},{"location":"technical/development/#4-code-review","title":"4. Code Review","text":"<ul> <li>Crear Pull Request</li> <li>Asegurar cobertura de tests</li> <li>Pasar CI/CD checks</li> <li>Obtener aprobaci\u00f3n</li> </ul>"},{"location":"technical/development/#patrones-y-mejores-practicas","title":"Patrones y Mejores Pr\u00e1cticas","text":""},{"location":"technical/development/#clean-architecture","title":"Clean Architecture","text":"<pre><code>app/\n\u251c\u2500\u2500 domain/         # Entidades y reglas de negocio\n\u251c\u2500\u2500 application/    # Casos de uso\n\u251c\u2500\u2500 infrastructure/ # Implementaciones concretas\n\u2514\u2500\u2500 interfaces/     # Controllers y presentadores\n</code></pre>"},{"location":"technical/development/#domain-driven-design","title":"Domain-Driven Design","text":"<ul> <li>Bounded Contexts claros</li> <li>Agregados bien definidos</li> <li>Value Objects inmutables</li> <li>Domain Events para comunicaci\u00f3n</li> </ul>"},{"location":"technical/development/#async-first","title":"Async First","text":"<pre><code># Ejemplo de endpoint as\u00edncrono\n@router.post(\"/candidates\")\nasync def create_candidate(\n    candidate: CandidateCreate,\n    service: CandidateService = Depends(get_candidate_service)\n) -&gt; CandidateResponse:\n    return await service.create(candidate)\n</code></pre>"},{"location":"technical/development/#event-driven","title":"Event-Driven","text":"<pre><code># Publicar evento\nawait event_publisher.publish(\n    \"candidate.created\",\n    CandidateCreatedEvent(id=candidate.id)\n)\n\n# Consumir evento\n@event_handler(\"candidate.created\")\nasync def handle_candidate_created(event: CandidateCreatedEvent):\n    await process_candidate(event.id)\n</code></pre>"},{"location":"technical/development/#ide-setup","title":"IDE Setup","text":""},{"location":"technical/development/#vscode","title":"VSCode","text":"<p>Extensiones recomendadas: - Python - Pylance - ESLint - Prettier - Thunder Client - Docker</p> <p>Settings: <pre><code>{\n    \"python.linting.enabled\": true,\n    \"python.linting.flake8Enabled\": true,\n    \"python.formatting.provider\": \"black\",\n    \"editor.formatOnSave\": true,\n    \"editor.codeActionsOnSave\": {\n        \"source.organizeImports\": true\n    }\n}\n</code></pre></p>"},{"location":"technical/development/#pycharm","title":"PyCharm","text":"<ul> <li>Habilitar type checking</li> <li>Configurar Black como formateador</li> <li>Activar formateo en guardado</li> </ul>"},{"location":"technical/development/#debugging","title":"Debugging","text":""},{"location":"technical/development/#core-backend_1","title":"Core Backend","text":"<pre><code># Usando debugger\nimport debugpy\ndebugpy.listen((\"0.0.0.0\", 5678))\ndebugpy.wait_for_client()\n</code></pre>"},{"location":"technical/development/#whatsapp-service_1","title":"WhatsApp Service","text":"<pre><code>// Usando debugger\ndebugger;\n</code></pre>"},{"location":"technical/development/#monitoreo-y-logs","title":"Monitoreo y Logs","text":""},{"location":"technical/development/#logging","title":"Logging","text":"<pre><code>from app.core.logger import get_logger\n\nlogger = get_logger(__name__)\nlogger.info(\"Procesando candidato\", extra={\"candidate_id\": id})\n</code></pre>"},{"location":"technical/development/#metricas","title":"M\u00e9tricas","text":"<ul> <li>Prometheus para m\u00e9tricas</li> <li>Grafana para visualizaci\u00f3n</li> </ul>"},{"location":"technical/development/#documentacion-de-api","title":"Documentaci\u00f3n de API","text":""},{"location":"technical/development/#core-backend_2","title":"Core Backend","text":"<ul> <li>OpenAPI (Swagger) en <code>/docs</code></li> <li>ReDoc en <code>/redoc</code></li> </ul>"},{"location":"technical/development/#whatsapp-service_2","title":"WhatsApp Service","text":"<ul> <li>OpenAPI para webhooks</li> <li>AsyncAPI para eventos</li> </ul>"},{"location":"technical/development/#seguridad","title":"Seguridad","text":""},{"location":"technical/development/#autenticacion","title":"Autenticaci\u00f3n","text":"<ul> <li>JWT para APIs</li> <li>Refresh tokens</li> <li>Rate limiting</li> </ul>"},{"location":"technical/development/#datos-sensibles","title":"Datos Sensibles","text":"<ul> <li>No logs de datos personales</li> <li>Encriptaci\u00f3n en tr\u00e1nsito</li> <li>Sanitizaci\u00f3n de inputs</li> </ul>"},{"location":"technical/development/#cicd","title":"CI/CD","text":""},{"location":"technical/development/#github-actions","title":"GitHub Actions","text":"<ul> <li>Tests autom\u00e1ticos</li> <li>Linting y type checking</li> <li>Build de im\u00e1genes</li> <li>Deploy a staging</li> </ul>"},{"location":"technical/development/#ambientes","title":"Ambientes","text":"<ul> <li>Development (local)</li> <li>Staging</li> <li>Production</li> </ul>"},{"location":"technical/development/#comandos-utiles","title":"Comandos \u00datiles","text":"<pre><code># Formatear c\u00f3digo\nmake format\n\n# Ejecutar tests\nmake test\n\n# Construir im\u00e1genes\nmake build\n\n# Iniciar servicios\nmake up\n\n# Detener servicios\nmake down\n</code></pre>"},{"location":"technical/setup/","title":"Gu\u00eda de Instalaci\u00f3n","text":""},{"location":"technical/setup/#requisitos-previos","title":"Requisitos Previos","text":""},{"location":"technical/setup/#software-base","title":"Software Base","text":"<ul> <li>Python 3.11+</li> <li>Node.js 18+</li> <li>Docker y Docker Compose</li> <li>Make (opcional, para comandos simplificados)</li> <li>Git</li> </ul>"},{"location":"technical/setup/#servicios-externos","title":"Servicios Externos","text":"<ul> <li>Cuenta de OpenAI (API key)</li> <li>WhatsApp Business API</li> <li>PostgreSQL</li> <li>RabbitMQ</li> </ul>"},{"location":"technical/setup/#instalacion","title":"Instalaci\u00f3n","text":""},{"location":"technical/setup/#1-clonar-el-repositorio","title":"1. Clonar el Repositorio","text":"<pre><code>git clone [URL_REPOSITORIO]\ncd recruitment-system\n</code></pre>"},{"location":"technical/setup/#2-configuracion-de-entorno","title":"2. Configuraci\u00f3n de Entorno","text":""},{"location":"technical/setup/#core-backend-python","title":"Core Backend (Python)","text":"<pre><code># Crear entorno virtual\ncd services/core\npython -m venv venv\nsource venv/bin/activate  # En Windows: .\\venv\\Scripts\\activate\n\n# Instalar dependencias\npip install -r requirements.txt\npip install -r requirements-dev.txt  # Dependencias de desarrollo\n</code></pre>"},{"location":"technical/setup/#whatsapp-service-nodejs","title":"WhatsApp Service (Node.js)","text":"<pre><code>cd services/whatsapp\nnpm install\n</code></pre>"},{"location":"technical/setup/#shared-kernel","title":"Shared Kernel","text":"<pre><code>cd shared\n# Python\npip install -e python/\n# Node.js\ncd typescript &amp;&amp; npm install\n</code></pre>"},{"location":"technical/setup/#3-variables-de-entorno","title":"3. Variables de Entorno","text":"<p>Copiar los archivos de ejemplo y configurar: <pre><code># Core Backend\ncp services/core/.env.example services/core/.env\n\n# WhatsApp Service\ncp services/whatsapp/.env.example services/whatsapp/.env\n</code></pre></p> <p>Variables requeridas: <pre><code># Core Backend (.env)\nDATABASE_URL=postgresql://user:pass@localhost:5432/recruitment\nOPENAI_API_KEY=sk-...\nRABBITMQ_URL=amqp://guest:guest@localhost:5672/\nJWT_SECRET=your-secret-key\n\n# WhatsApp Service (.env)\nWHATSAPP_API_TOKEN=your-token\nWHATSAPP_VERIFY_TOKEN=your-verify-token\nRABBITMQ_URL=amqp://guest:guest@localhost:5672/\n</code></pre></p>"},{"location":"technical/setup/#4-servicios-locales-con-docker","title":"4. Servicios Locales con Docker","text":"<pre><code># Iniciar servicios\ndocker-compose up -d postgres rabbitmq\n\n# Verificar estado\ndocker-compose ps\n</code></pre>"},{"location":"technical/setup/#5-migraciones-de-base-de-datos","title":"5. Migraciones de Base de Datos","text":"<pre><code>cd services/core\nalembic upgrade head\n</code></pre>"},{"location":"technical/setup/#verificacion-de-instalacion","title":"Verificaci\u00f3n de Instalaci\u00f3n","text":""},{"location":"technical/setup/#1-core-backend","title":"1. Core Backend","text":"<pre><code>cd services/core\npytest  # Ejecutar tests\nuvicorn app.main:app --reload  # Iniciar servidor\n</code></pre>"},{"location":"technical/setup/#2-whatsapp-service","title":"2. WhatsApp Service","text":"<pre><code>cd services/whatsapp\nnpm test  # Ejecutar tests\nnpm run dev  # Iniciar servidor\n</code></pre>"},{"location":"technical/setup/#3-verificar-apis","title":"3. Verificar APIs","text":"<pre><code># Core Backend\ncurl http://localhost:8000/health\n\n# WhatsApp Service\ncurl http://localhost:3000/health\n</code></pre>"},{"location":"technical/setup/#problemas-comunes","title":"Problemas Comunes","text":""},{"location":"technical/setup/#1-conexion-a-postgresql","title":"1. Conexi\u00f3n a PostgreSQL","text":"<ul> <li>Verificar que PostgreSQL est\u00e9 corriendo: <code>docker-compose ps</code></li> <li>Comprobar credenciales en <code>.env</code></li> <li>Verificar que la base de datos existe</li> </ul>"},{"location":"technical/setup/#2-rabbitmq","title":"2. RabbitMQ","text":"<ul> <li>Verificar que RabbitMQ est\u00e9 corriendo: <code>docker-compose ps</code></li> <li>Comprobar la interfaz web: <code>http://localhost:15672</code></li> <li>Verificar conexiones en <code>.env</code></li> </ul>"},{"location":"technical/setup/#3-pythonnodejs","title":"3. Python/Node.js","text":"<ul> <li>Verificar versiones: <code>python --version</code>, <code>node --version</code></li> <li>Comprobar entorno virtual activo (Python)</li> <li>Verificar instalaci\u00f3n de dependencias</li> </ul>"},{"location":"technical/setup/#siguientes-pasos","title":"Siguientes Pasos","text":"<ol> <li>Revisar Gu\u00eda de Desarrollo</li> <li>Configurar IDE</li> <li>Ejecutar Tests</li> <li>Leer Gu\u00eda de Contribuci\u00f3n</li> </ol>"},{"location":"technical/testing/","title":"Estrategia de Testing","text":""},{"location":"technical/testing/#niveles-de-testing","title":"Niveles de Testing","text":""},{"location":"technical/testing/#1-unit-tests","title":"1. Unit Tests","text":"<ul> <li>Pruebas aisladas de componentes</li> <li>Mock de dependencias</li> <li>Cobertura m\u00ednima: 80%</li> </ul>"},{"location":"technical/testing/#2-integration-tests","title":"2. Integration Tests","text":"<ul> <li>Pruebas de integraci\u00f3n entre componentes</li> <li>Uso de containers para servicios externos</li> <li>Verificaci\u00f3n de contratos</li> </ul>"},{"location":"technical/testing/#3-end-to-end-tests","title":"3. End-to-End Tests","text":"<ul> <li>Pruebas de flujos completos</li> <li>Simulaci\u00f3n de interacciones de usuario</li> <li>Verificaci\u00f3n de integraciones externas</li> </ul>"},{"location":"technical/testing/#estructura-de-tests","title":"Estructura de Tests","text":""},{"location":"technical/testing/#core-backend-python","title":"Core Backend (Python)","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 domain/\n\u2502   \u251c\u2500\u2500 application/\n\u2502   \u2514\u2500\u2500 infrastructure/\n\u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u251c\u2500\u2500 database/\n\u2502   \u2514\u2500\u2500 events/\n\u251c\u2500\u2500 e2e/\n\u2502   \u2514\u2500\u2500 flows/\n\u2514\u2500\u2500 conftest.py\n</code></pre>"},{"location":"technical/testing/#whatsapp-service-typescript","title":"WhatsApp Service (TypeScript)","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 handlers/\n\u2502   \u251c\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 utils/\n\u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2514\u2500\u2500 events/\n\u2514\u2500\u2500 e2e/\n</code></pre>"},{"location":"technical/testing/#herramientas","title":"Herramientas","text":""},{"location":"technical/testing/#python","title":"Python","text":"<ul> <li>pytest</li> <li>pytest-asyncio</li> <li>pytest-cov</li> <li>pytest-mock</li> <li>factory-boy</li> <li>testcontainers</li> </ul>"},{"location":"technical/testing/#typescript","title":"TypeScript","text":"<ul> <li>Jest</li> <li>Supertest</li> <li>ts-jest</li> <li>jest-mock-extended</li> </ul>"},{"location":"technical/testing/#ejemplos-de-tests","title":"Ejemplos de Tests","text":""},{"location":"technical/testing/#unit-test-python","title":"Unit Test (Python)","text":"<pre><code>@pytest.mark.asyncio\nasync def test_create_candidate():\n    # Arrange\n    candidate_data = CandidateFactory.build()\n    repository = Mock(spec=CandidateRepository)\n    service = CandidateService(repository)\n\n    # Act\n    result = await service.create(candidate_data)\n\n    # Assert\n    assert result.id is not None\n    repository.save.assert_called_once()\n</code></pre>"},{"location":"technical/testing/#integration-test-typescript","title":"Integration Test (TypeScript)","text":"<pre><code>describe('WhatsApp Webhook', () =&gt; {\n  it('should process incoming message', async () =&gt; {\n    // Arrange\n    const message = createMockMessage();\n\n    // Act\n    const response = await request(app)\n      .post('/webhook')\n      .send(message);\n\n    // Assert\n    expect(response.status).toBe(200);\n    expect(messageQueue.hasMessage()).toBeTruthy();\n  });\n});\n</code></pre>"},{"location":"technical/testing/#fixtures-y-factories","title":"Fixtures y Factories","text":""},{"location":"technical/testing/#python-fixtures","title":"Python Fixtures","text":"<pre><code>@pytest.fixture\nasync def db():\n    async with AsyncTestingSession() as session:\n        yield session\n        await session.rollback()\n\n@pytest.fixture\ndef candidate_factory(db):\n    return CandidateFactory(session=db)\n</code></pre>"},{"location":"technical/testing/#typescript-factories","title":"TypeScript Factories","text":"<pre><code>const createMockMessage = () =&gt; ({\n  type: 'text',\n  content: 'Hello',\n  from: '+1234567890'\n});\n</code></pre>"},{"location":"technical/testing/#mocking","title":"Mocking","text":""},{"location":"technical/testing/#servicios-externos","title":"Servicios Externos","text":"<pre><code>@pytest.fixture\ndef mock_openai():\n    with patch('app.infrastructure.ai.OpenAIClient') as mock:\n        yield mock\n\ndef test_analyze_cv(mock_openai):\n    mock_openai.analyze.return_value = {\n        'score': 0.8,\n        'skills': ['Python', 'AI']\n    }\n    # Test implementation\n</code></pre>"},{"location":"technical/testing/#eventos","title":"Eventos","text":"<pre><code>jest.mock('../events/publisher', () =&gt; ({\n  publish: jest.fn()\n}));\n</code></pre>"},{"location":"technical/testing/#tests-de-api","title":"Tests de API","text":""},{"location":"technical/testing/#fastapi","title":"FastAPI","text":"<pre><code>@pytest.mark.asyncio\nasync def test_create_candidate_api(client):\n    response = await client.post(\n        '/candidates',\n        json={'name': 'John Doe', 'email': 'john@example.com'}\n    )\n    assert response.status_code == 201\n    assert response.json()['id'] is not None\n</code></pre>"},{"location":"technical/testing/#express","title":"Express","text":"<pre><code>describe('POST /webhook', () =&gt; {\n  it('validates signature', async () =&gt; {\n    const response = await request(app)\n      .post('/webhook')\n      .set('X-Hub-Signature', invalidSignature)\n      .send({});\n\n    expect(response.status).toBe(401);\n  });\n});\n</code></pre>"},{"location":"technical/testing/#cobertura-de-codigo","title":"Cobertura de C\u00f3digo","text":""},{"location":"technical/testing/#python_1","title":"Python","text":"<pre><code># Ejecutar tests con cobertura\npytest --cov=app --cov-report=html\n\n# Verificar umbral m\u00ednimo\npytest --cov=app --cov-fail-under=80\n</code></pre>"},{"location":"technical/testing/#typescript_1","title":"TypeScript","text":"<pre><code># Ejecutar tests con cobertura\nnpm run test:coverage\n\n# Configuraci\u00f3n en package.json\n{\n  \"jest\": {\n    \"coverageThreshold\": {\n      \"global\": {\n        \"statements\": 80,\n        \"branches\": 80,\n        \"functions\": 80,\n        \"lines\": 80\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"technical/testing/#cicd-integration","title":"CI/CD Integration","text":"<pre><code># .github/workflows/test.yml\nname: Tests\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Set up Python\n        uses: actions/setup-python@v2\n        with:\n          python-version: '3.11'\n\n      - name: Install dependencies\n        run: |\n          pip install -r requirements.txt\n          pip install -r requirements-dev.txt\n\n      - name: Run tests\n        run: |\n          pytest --cov=app --cov-report=xml\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v2\n</code></pre>"},{"location":"technical/testing/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<ol> <li>Naming</li> <li>Test names deben ser descriptivos</li> <li> <p>Seguir patr\u00f3n: test_[funci\u00f3n][escenario][resultado esperado]</p> </li> <li> <p>Organizaci\u00f3n</p> </li> <li>Un archivo de test por m\u00f3dulo</li> <li>Agrupar tests relacionados en clases</li> <li> <p>Mantener tests independientes</p> </li> <li> <p>Assertions</p> </li> <li>Usar assertions espec\u00edficos</li> <li>Una aserci\u00f3n principal por test</li> <li> <p>Assertions auxiliares cuando necesario</p> </li> <li> <p>Datos de Prueba</p> </li> <li>Usar factories para datos de prueba</li> <li>Evitar datos hardcodeados</li> <li> <p>Mantener datos de prueba m\u00ednimos</p> </li> <li> <p>Mocking</p> </li> <li>Mock solo lo necesario</li> <li>Preferir fixtures sobre mocks inline</li> <li> <p>Verificar comportamiento, no implementaci\u00f3n</p> </li> <li> <p>Mantenimiento</p> </li> <li>Actualizar tests con cambios de c\u00f3digo</li> <li>Eliminar tests obsoletos</li> <li>Refactorizar tests cuando necesario</li> </ol>"}]}